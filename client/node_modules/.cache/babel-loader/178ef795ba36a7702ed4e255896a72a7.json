{"ast":null,"code":"'use-strict';\n\nimport { HEALTH_CATEGORIES, USER_ACCOUNT_TYPE } from '../constants';\nconst log = console.log;\nexport const addUserHandler = (ctx, newUser) => {\n  log('Adding user...');\n  const users = ctx.state.userDB;\n  users[newUser.hash] = newUser;\n  ctx.setState({\n    userDB: users\n  });\n  log(ctx.state.userDB);\n};\nexport const signUpUser = signUpCtx => {\n  log('Creating user...');\n\n  if (_signUpInputValidate(signUpCtx)) {\n    const inputs = signUpCtx.state;\n    const newUser = new User(inputs.first, inputs.last, inputs.email, inputs.password, inputs.sex);\n    signUpCtx.props.addUserHandler(newUser);\n    log('User successfully added');\n  } else {\n    log('Unsuccessful in adding user');\n  }\n\n  _clearSignUpInputs(signUpCtx);\n};\n\nconst _signUpInputValidate = signUpCtx => {\n  log('Validating sign-up inputs...');\n\n  const isFirstValid = _isInvalid(signUpCtx.state.first);\n\n  const isLastValid = _isInvalid(signUpCtx.state.last);\n\n  const isEmailValid = _isInvalid(signUpCtx.state.email);\n\n  const isPassValid = _isInvalid(signUpCtx.state.password);\n\n  const isSexValid = _isInvalid(signUpCtx.state.sex);\n\n  locCtx.setState({\n    isFirstValid: isFirstValid,\n    isLastValid: isLastValid,\n    isEmailValid: isEmailValid,\n    isPassValid: isPassValid,\n    isSexValid: isSexValid\n  });\n  return isFirstValid && isLastValid && isEmailValid && isPassValid && isSexValid;\n};\n\nconst _isInvalid = value => {\n  return value !== null && value !== undefined && value !== '' && value !== 'select';\n};\n\nexport class User {\n  constructor(firstName, lastName, email, password, sex) {\n    this.getHash = () => {\n      return this.hash;\n    };\n\n    this.firstName = firstName;\n    this.lastName = lastName;\n    this.email = email;\n    this.password = password;\n    this.type = USER_ACCOUNT_TYPE;\n    this.sex = sex;\n    this.hash = this.email + this.password;\n    this.reminders = {\n      [HEALTH_CATEGORIES.medical]: [],\n      [HEALTH_CATEGORIES.mental]: [],\n      [HEALTH_CATEGORIES.phsycial]: []\n    };\n    this.notifications = [];\n  }\n\n}\n\nconst _clearSignUpInputs = ctx => {\n  ctx.setState({\n    first: '',\n    last: '',\n    email: '',\n    password: '',\n    sex: ''\n  });\n};","map":{"version":3,"sources":["/Users/cd/Desktop/team27/src/js/actions/signUp.js"],"names":["HEALTH_CATEGORIES","USER_ACCOUNT_TYPE","log","console","addUserHandler","ctx","newUser","users","state","userDB","hash","setState","signUpUser","signUpCtx","_signUpInputValidate","inputs","User","first","last","email","password","sex","props","_clearSignUpInputs","isFirstValid","_isInvalid","isLastValid","isEmailValid","isPassValid","isSexValid","locCtx","value","undefined","constructor","firstName","lastName","getHash","type","reminders","medical","mental","phsycial","notifications"],"mappings":"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","sourcesContent":["'use-strict';\nimport { HEALTH_CATEGORIES, USER_ACCOUNT_TYPE } from '../constants';\n\nconst log = console.log;\n\nexport const addUserHandler = (ctx, newUser) => {\n  log('Adding user...');\n  const users = ctx.state.userDB;\n\n  users[newUser.hash] = newUser;\n  ctx.setState({\n    userDB: users,\n  });\n  log(ctx.state.userDB);\n};\n\nexport const signUpUser = (signUpCtx) => {\n  log('Creating user...');\n  if (_signUpInputValidate(signUpCtx)) {\n    const inputs = signUpCtx.state;\n    const newUser = new User(inputs.first, inputs.last, inputs.email, inputs.password, inputs.sex);\n    signUpCtx.props.addUserHandler(newUser);\n    log('User successfully added');\n  } else {\n    log('Unsuccessful in adding user')\n  }\n  _clearSignUpInputs(signUpCtx);\n};\n\nconst _signUpInputValidate = (signUpCtx) => {\n  log('Validating sign-up inputs...');\n  const isFirstValid = _isInvalid(signUpCtx.state.first);\n  const isLastValid = _isInvalid(signUpCtx.state.last);\n  const isEmailValid = _isInvalid(signUpCtx.state.email);\n  const isPassValid = _isInvalid(signUpCtx.state.password);\n  const isSexValid = _isInvalid(signUpCtx.state.sex);\n\n  locCtx.setState({\n    isFirstValid: isFirstValid,\n    isLastValid: isLastValid,\n    isEmailValid: isEmailValid,\n    isPassValid: isPassValid,\n    isSexValid: isSexValid,\n  });\n\n  return isFirstValid && isLastValid && isEmailValid && isPassValid && isSexValid;\n};\n\nconst _isInvalid = (value) => {\n  return (\n    value !== null &&\n    value !== undefined &&\n    value !== '' &&\n    value !== 'select'\n  );\n};\n\nexport class User {\n  constructor(firstName, lastName, email, password, sex) {\n    this.firstName = firstName;\n    this.lastName = lastName;\n    this.email = email;\n    this.password = password;\n    this.type = USER_ACCOUNT_TYPE;\n    this.sex = sex;\n    this.hash = this.email + this.password;\n    this.reminders = {\n      [HEALTH_CATEGORIES.medical]: [],\n      [HEALTH_CATEGORIES.mental]: [],\n      [HEALTH_CATEGORIES.phsycial]: [],\n    };\n    this.notifications = [];\n  }\n\n  getHash = () => {\n    return this.hash;\n  };\n}\n\nconst _clearSignUpInputs = (ctx) => {\n  ctx.setState({\n    first: '',\n    last: '',\n    email: '',\n    password: '',\n    sex: '',\n  });\n};\n"]},"metadata":{},"sourceType":"module"}