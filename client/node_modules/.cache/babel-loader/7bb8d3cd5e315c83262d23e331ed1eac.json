{"ast":null,"code":"import { REMINDER_STATUS, NOTIFICATION_TYPE, ADMIN_ACCOUNT_TYPE } from '../constants';\nimport { addNotificationHandler } from './notification';\nconst log = console.log;\nexport const addReminderHandler = (appCtx, reminderCtx) => {\n  log('Adding new reminder...');\n\n  const isInputValid = _reminderInputValidate(appCtx, reminderCtx);\n\n  log('Input validity status: ' + isInputValid);\n\n  if (isInputValid) {\n    _addReminder(appCtx, reminderCtx);\n\n    reminderCtx.setState({\n      newReminderAdded: true\n    });\n    log(`Successfully added new reminder '${reminderCtx.state.reminderName}'`);\n  } else {\n    log('Unsuccessfully in adding reminder');\n  }\n};\n\nconst _addReminder = (appCtx, reminderCtx) => {\n  const user = appCtx.state.activeUser;\n  const {\n    category,\n    subCategory,\n    reminderName,\n    reminderTime,\n    reminderNote\n  } = reminderCtx.state;\n  const newReminder = new Reminder(category, subCategory, reminderName, reminderTime, reminderNote);\n  user.reminders[reminderCtx.state.category].push(newReminder);\n  appCtx.setState({\n    activeUser: user\n  });\n};\n\nconst _reminderInputValidate = (appCtx, reminderCtx) => {\n  log('Validating reminder inputs...');\n\n  const isCategoryValid = _isInvalid(reminderCtx.state.category);\n\n  const isSubCategoryValid = appCtx.state.activeUser.type === ADMIN_ACCOUNT_TYPE ? true : _isInvalid(reminderCtx.state.subCategory);\n\n  const isNameValid = _isInvalid(reminderCtx.state.reminderName);\n\n  const isDateTimeValid = _isInvalid(reminderCtx.state.reminderTime);\n\n  reminderCtx.setState({\n    isCategoryValid: isCategoryValid,\n    isSubCategoryValid: isSubCategoryValid,\n    isNameValid: isNameValid,\n    isDateTimeValid: isDateTimeValid\n  });\n  return isCategoryValid && isSubCategoryValid && isNameValid && isDateTimeValid;\n};\n\nconst _isInvalid = value => {\n  return value !== null && value !== undefined && value !== '' && value !== 'select';\n};\n\nexport const editReminderHandler = (appCtx, reminderCtx, category, id) => {\n  log('Editing reminder...');\n\n  const isInputValid = _reminderInputValidate(reminderCtx);\n\n  if (isInputValid) {\n    _editReminder(appCtx, reminderCtx, category, id);\n\n    reminderCtx.setState({\n      newReminderAdded: true\n    });\n    log('Successfully editted reminder');\n  } else {\n    log('Unsuccessfully editing reminder');\n  }\n};\n\nconst _editReminder = (appCtx, reminderCtx, category, id) => {\n  const user = appCtx.state.activeUser;\n\n  const index = _getReminderIndex(user.reminders[category], id);\n\n  const reminder = user.reminders[category][index];\n  reminder.category = reminderCtx.state.category;\n  reminder.subCategory = reminderCtx.state.subCategory;\n  reminder.name = reminderCtx.state.reminderName;\n  reminder.time = reminderCtx.state.reminderTime;\n  reminder.note = reminderCtx.state.reminderNote;\n  user.reminders[category][index] = reminder;\n  appCtx.setState({\n    activeUser: user\n  });\n};\n\nexport const completeReminderHandler = (ctx, category, id, timeout) => {\n  log('Updating status of reminder to completed...');\n  setReminderStatus(ctx, category, id, REMINDER_STATUS.completed);\n  clearTimeout(timeout);\n  log('Successfully completed reminder');\n};\nexport const deleteReminderHandler = (ctx, category, id, timeout) => {\n  log('Removing reminder...');\n  const user = ctx.state.activeUser;\n\n  const index = _getReminderIndex(user.reminders[category], id);\n\n  const reminders = user.reminders[category];\n  reminders.splice(index, 1);\n  user.reminders[category] = reminders;\n  ctx.setState({\n    activeUser: user\n  });\n  clearTimeout(timeout);\n  log('Successfully removed reminder');\n};\nexport const setReminderStatus = (ctx, category, id, status) => {\n  const user = ctx.state.activeUser;\n  console.log(user);\n  console.log(user.reminders[category]);\n  console.log(category);\n\n  const index = _getReminderIndex(user.reminders[category], id);\n\n  const reminder = user.reminders[category][index];\n  reminder.status = status;\n  user.reminders[category][id] = reminder;\n  ctx.setState({\n    activeUser: user\n  });\n};\nexport const notifyAboutReminder = (ctx, reminder) => {\n  setReminderStatus(ctx, reminder.category, reminder.id, REMINDER_STATUS.overdue);\n  addNotificationHandler(ctx, NOTIFICATION_TYPE.reminder, reminder.name, reminder.note);\n};\n\nconst _getReminderIndex = (list, id) => {\n  let i;\n\n  for (i = 0; i < (list === null || list === void 0 ? void 0 : list.length); i++) {\n    if (list[i].id === id) {\n      return i;\n    }\n  }\n};\n\nexport class Reminder {\n  constructor(category, subCategory, name, time, note) {\n    this._generateId = () => {\n      return 'r' + Math.random().toString(36).substr(3, 8);\n    };\n\n    this.category = category;\n    this.subCategory = subCategory;\n    this.name = name;\n    this.time = time;\n    this.note = note;\n    this.id = this._generateId();\n    this.status = REMINDER_STATUS.active;\n  }\n\n}","map":{"version":3,"sources":["/Users/cd/Desktop/team27/src/js/actions/reminders.js"],"names":["REMINDER_STATUS","NOTIFICATION_TYPE","ADMIN_ACCOUNT_TYPE","addNotificationHandler","log","console","addReminderHandler","appCtx","reminderCtx","isInputValid","_reminderInputValidate","_addReminder","setState","newReminderAdded","state","reminderName","user","activeUser","category","subCategory","reminderTime","reminderNote","newReminder","Reminder","reminders","push","isCategoryValid","_isInvalid","isSubCategoryValid","type","isNameValid","isDateTimeValid","value","undefined","editReminderHandler","id","_editReminder","index","_getReminderIndex","reminder","name","time","note","completeReminderHandler","ctx","timeout","setReminderStatus","completed","clearTimeout","deleteReminderHandler","splice","status","notifyAboutReminder","overdue","list","i","length","constructor","_generateId","Math","random","toString","substr","active"],"mappings":"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","sourcesContent":["import { REMINDER_STATUS, NOTIFICATION_TYPE, ADMIN_ACCOUNT_TYPE } from '../constants';\nimport { addNotificationHandler } from './notification';\n\nconst log = console.log;\n\nexport const addReminderHandler = (appCtx, reminderCtx) => {\n  log('Adding new reminder...');\n  const isInputValid = _reminderInputValidate(appCtx, reminderCtx);\n  log('Input validity status: ' + isInputValid);\n  if (isInputValid) {\n    _addReminder(appCtx, reminderCtx);\n    reminderCtx.setState({\n      newReminderAdded: true,\n    });\n    log(`Successfully added new reminder '${reminderCtx.state.reminderName}'`);\n  } else {\n    log('Unsuccessfully in adding reminder');\n  }\n};\n\nconst _addReminder = (appCtx, reminderCtx) => {\n  const user = appCtx.state.activeUser;\n  const { category, subCategory, reminderName, reminderTime, reminderNote } = reminderCtx.state;\n  const newReminder = new Reminder(category, subCategory, reminderName, reminderTime, reminderNote);\n  user.reminders[reminderCtx.state.category].push(newReminder);\n  appCtx.setState({\n    activeUser: user,\n  });\n};\n\nconst _reminderInputValidate = (appCtx, reminderCtx) => {\n  log('Validating reminder inputs...');\n  const isCategoryValid = _isInvalid(reminderCtx.state.category);\n  const isSubCategoryValid = (appCtx.state.activeUser.type === ADMIN_ACCOUNT_TYPE ? \n    true : _isInvalid(reminderCtx.state.subCategory));\n  const isNameValid = _isInvalid(reminderCtx.state.reminderName);\n  const isDateTimeValid = _isInvalid(reminderCtx.state.reminderTime);\n  reminderCtx.setState({\n    isCategoryValid: isCategoryValid,\n    isSubCategoryValid: isSubCategoryValid,\n    isNameValid: isNameValid,\n    isDateTimeValid: isDateTimeValid,\n  });\n\n  return isCategoryValid && isSubCategoryValid && isNameValid && isDateTimeValid;\n};\n\nconst _isInvalid = (value) => {\n  return value !== null && value !== undefined && value !== '' && value !== 'select';\n};\n\nexport const editReminderHandler = (appCtx, reminderCtx, category, id) => {\n  log('Editing reminder...');\n  const isInputValid = _reminderInputValidate(reminderCtx);\n  if (isInputValid) {\n    _editReminder(appCtx, reminderCtx, category, id);\n    reminderCtx.setState({\n      newReminderAdded: true,\n    });\n    log('Successfully editted reminder');\n  } else {\n    log('Unsuccessfully editing reminder');\n  }\n};\n\nconst _editReminder = (appCtx, reminderCtx, category, id) => {\n  const user = appCtx.state.activeUser;\n  const index = _getReminderIndex(user.reminders[category], id);\n  const reminder = user.reminders[category][index];\n  reminder.category = reminderCtx.state.category;\n  reminder.subCategory = reminderCtx.state.subCategory;\n  reminder.name = reminderCtx.state.reminderName;\n  reminder.time = reminderCtx.state.reminderTime;\n  reminder.note = reminderCtx.state.reminderNote;\n  user.reminders[category][index] = reminder;\n  appCtx.setState({\n    activeUser: user,\n  });\n};\n\nexport const completeReminderHandler = (ctx, category, id, timeout) => {\n  log('Updating status of reminder to completed...');\n  setReminderStatus(ctx, category, id, REMINDER_STATUS.completed);\n  clearTimeout(timeout);\n  log('Successfully completed reminder');\n};\n\nexport const deleteReminderHandler = (ctx, category, id, timeout) => {\n  log('Removing reminder...');\n  const user = ctx.state.activeUser;\n  const index = _getReminderIndex(user.reminders[category], id);\n  const reminders = user.reminders[category];\n  reminders.splice(index, 1);\n  user.reminders[category] = reminders;\n  ctx.setState({\n    activeUser: user,\n  });\n  clearTimeout(timeout);\n  log('Successfully removed reminder');\n};\n\nexport const setReminderStatus = (ctx, category, id, status) => {\n  const user = ctx.state.activeUser;\n  console.log(user);\n  console.log(user.reminders[category]);\n  console.log(category);\n  const index = _getReminderIndex(user.reminders[category], id);\n  const reminder = user.reminders[category][index];\n  reminder.status = status;\n  user.reminders[category][id] = reminder;\n  ctx.setState({\n    activeUser: user,\n  });\n};\n\nexport const notifyAboutReminder = (ctx, reminder) => {\n  setReminderStatus(ctx, reminder.category, reminder.id, REMINDER_STATUS.overdue);\n  addNotificationHandler(ctx, NOTIFICATION_TYPE.reminder, reminder.name, reminder.note);\n};\n\nconst _getReminderIndex = (list, id) => {\n  let i;\n  for (i = 0; i < list?.length; i++) {\n    if (list[i].id === id) {\n      return i;\n    }\n  }\n};\n\nexport class Reminder {\n  constructor(category, subCategory, name, time, note) {\n    this.category = category;\n    this.subCategory = subCategory;\n    this.name = name;\n    this.time = time;\n    this.note = note;\n    this.id = this._generateId();\n    this.status = REMINDER_STATUS.active;\n  }\n\n  _generateId = () => {\n    return 'r' + Math.random().toString(36).substr(3, 8);\n  };\n}\n"]},"metadata":{},"sourceType":"module"}