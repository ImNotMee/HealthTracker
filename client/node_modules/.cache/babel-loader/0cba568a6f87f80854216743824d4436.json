{"ast":null,"code":"import { NOTIFICATION_TYPE, USER_ACCOUNT_TYPE } from '../constants';\nimport { Notification } from './notification';\nimport { AppLocation } from './checkIn';\nconst log = console.log;\nexport const sendAlertHandler = (ctx, location) => {\n  log('Alerting users...');\n  const users = ctx.state.userDB;\n\n  for (let key in users) {\n    let user = users[key];\n\n    if (user.type === USER_ACCOUNT_TYPE && _wasUserCheckedIn(user, location)) {\n      let notif = new Notification(NOTIFICATION_TYPE.alert, 'You May Have COVID', `A covid case has been reported at ${location.name}`);\n      user.notifications.push(notif);\n      users[key] = user;\n    }\n  }\n\n  ctx.setState({\n    userDB: users\n  }, () => {\n    log('Successfully alerted users ' + JSON.stringify(ctx.state.userDB));\n  });\n};\n\nconst _wasUserCheckedIn = (user, location) => {\n  const locs = user.checkInHistory;\n\n  for (let loc in locs) {\n    if (loc.id === location.id) {\n      return true;\n    }\n  }\n\n  return false;\n};\n\nexport const deleteLocationHandler = (ctx, adCtx, location) => {\n  log('Deleting location...');\n  const locs = ctx.state.locationsDB;\n  const key = location.id;\n  delete locs[key];\n  ctx.setState({\n    locationsDB: locs\n  }, () => {\n    log('Successfully deleted location');\n    log(ctx.state.locationsDB);\n  });\n  adCtx.setState({\n    locationViewed: undefined\n  });\n};\nexport const addLocationHandler = (ctx, addLocCtx) => {\n  log('Adding new location...');\n\n  if (_locationInputValidate(addLocCtx)) {\n    const locDB = ctx.state.locationsDB;\n    const {\n      locationName,\n      address,\n      imageUrl,\n      maxOccupancy,\n      description\n    } = addLocCtx.state;\n    const newLoc = new AppLocation(locationName, maxOccupancy, address, description, imageUrl);\n    locDB[newLoc.id] = newLoc;\n    ctx.setState({\n      locationsDB: locDB\n    }, () => {\n      log('Successfully added new location to DB' + JSON.stringify(ctx.state.locationsDB));\n    });\n    addLocCtx.setState({\n      newLocationAdded: true\n    });\n  } else {\n    log('Unuccessful in adding new location to DB');\n  }\n};\nexport const editLocationHandler = (ctx, locCtx) => {\n  log('Editing location...');\n\n  if (_locationInputValidate(locCtx)) {\n    _editLocation(ctx, locCtx);\n\n    locCtx.setState({\n      newLocationAdded: true\n    }, () => {\n      log('Successfully editted reminder' + ctx.state.locationsDB);\n    });\n  } else {\n    log('Unsuccessfully editing reminder');\n  }\n};\n\nconst _editLocation = (appCtx, locCtx) => {\n  const locs = appCtx.state.locationsDB;\n  const loc = locs[locCtx.state.locationName];\n  loc.name = locCtx.state.locationName;\n  loc.address = locCtx.state.address;\n  loc.imageUrl = locCtx.state.imageUrl;\n  loc.maxOccupancy = locCtx.state.maxOccupancy;\n  loc.description = locCtx.state.description;\n  locs[loc.name] = loc;\n  appCtx.setState({\n    locationsDB: locs\n  });\n};\n\nconst _locationInputValidate = locCtx => {\n  log('Validating reminder inputs...');\n\n  const isNameValid = _isInvalid(locCtx.state.locationName);\n\n  const isAddressValid = _isInvalid(locCtx.state.address);\n\n  const isImageUrlValid = _isInvalid(locCtx.state.imageUrl);\n\n  const isMaxOccValid = _isInvalid(locCtx.state.maxOccupancy);\n\n  const isDescValid = _isInvalid(locCtx.state.description);\n\n  locCtx.setState({\n    isNameValid: isNameValid,\n    isAddressValid: isAddressValid,\n    isImageUrlValid: isImageUrlValid,\n    isMaxOccValid: isMaxOccValid,\n    isDescValid: isDescValid\n  });\n  return isNameValid && isAddressValid && isImageUrlValid && isMaxOccValid && isDescValid;\n};\n\nconst _isInvalid = value => {\n  return value !== null && value !== undefined && value !== '' && value !== 'select' && value !== 'undefined';\n};","map":{"version":3,"sources":["/Users/cd/Desktop/team27/src/js/actions/adminCheckIn.js"],"names":["NOTIFICATION_TYPE","USER_ACCOUNT_TYPE","Notification","AppLocation","log","console","sendAlertHandler","ctx","location","users","state","userDB","key","user","type","_wasUserCheckedIn","notif","alert","name","notifications","push","setState","JSON","stringify","locs","checkInHistory","loc","id","deleteLocationHandler","adCtx","locationsDB","locationViewed","undefined","addLocationHandler","addLocCtx","_locationInputValidate","locDB","locationName","address","imageUrl","maxOccupancy","description","newLoc","newLocationAdded","editLocationHandler","locCtx","_editLocation","appCtx","isNameValid","_isInvalid","isAddressValid","isImageUrlValid","isMaxOccValid","isDescValid","value"],"mappings":"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","sourcesContent":["import { NOTIFICATION_TYPE, USER_ACCOUNT_TYPE } from '../constants';\nimport { Notification } from './notification';\nimport { AppLocation } from './checkIn';\n\nconst log = console.log;\n\nexport const sendAlertHandler = (ctx, location) => {\n  log('Alerting users...');\n  const users = ctx.state.userDB;\n  for (let key in users) {\n    let user = users[key];\n    if (user.type === USER_ACCOUNT_TYPE && _wasUserCheckedIn(user, location)) {\n      let notif = new Notification(\n        NOTIFICATION_TYPE.alert,\n        'You May Have COVID',\n        `A covid case has been reported at ${location.name}`,\n      );\n      user.notifications.push(notif);\n      users[key] = user;\n    }\n  }\n\n  ctx.setState(\n    {\n      userDB: users,\n    },\n    () => {\n      log('Successfully alerted users ' + JSON.stringify(ctx.state.userDB));\n    },\n  );\n};\n\nconst _wasUserCheckedIn = (user, location) => {\n  const locs = user.checkInHistory;\n  for (let loc in locs) {\n    if (loc.id === location.id) {\n      return true;\n    }\n  }\n  return false;\n};\n\nexport const deleteLocationHandler = (ctx, adCtx, location) => {\n  log('Deleting location...');\n  const locs = ctx.state.locationsDB;\n  const key = location.id;\n  delete locs[key];\n  ctx.setState(\n    {\n      locationsDB: locs,\n    },\n    () => {\n      log('Successfully deleted location');\n      log(ctx.state.locationsDB);\n    },\n  );\n\n  adCtx.setState({\n    locationViewed: undefined,\n  });\n};\n\nexport const addLocationHandler = (ctx, addLocCtx) => {\n  log('Adding new location...');\n  if (_locationInputValidate(addLocCtx)) {\n    const locDB = ctx.state.locationsDB;\n    const { locationName, address, imageUrl, maxOccupancy, description } = addLocCtx.state;\n    const newLoc = new AppLocation(locationName, maxOccupancy, address, description, imageUrl);\n    locDB[newLoc.id] = newLoc;\n    ctx.setState(\n      {\n        locationsDB: locDB,\n      },\n      () => {\n        log('Successfully added new location to DB' + JSON.stringify(ctx.state.locationsDB));\n      },\n    );\n    addLocCtx.setState({\n      newLocationAdded: true,\n    });\n  } else {\n    log('Unuccessful in adding new location to DB');\n  }\n};\n\nexport const editLocationHandler = (ctx, locCtx) => {\n  log('Editing location...');\n  if (_locationInputValidate(locCtx)) {\n    _editLocation(ctx, locCtx);\n    locCtx.setState({\n      newLocationAdded: true,\n    }, () => {log('Successfully editted reminder' + ctx.state.locationsDB);});\n  } else {\n    log('Unsuccessfully editing reminder');\n  }\n}\n\nconst _editLocation = (appCtx, locCtx) => {\n  const locs = appCtx.state.locationsDB;\n  const loc = locs[locCtx.state.locationName];\n  loc.name = locCtx.state.locationName;\n  loc.address = locCtx.state.address;\n  loc.imageUrl = locCtx.state.imageUrl;\n  loc.maxOccupancy = locCtx.state.maxOccupancy;\n  loc.description = locCtx.state.description;\n  locs[loc.name] = loc;\n  appCtx.setState({\n    locationsDB: locs,\n  });\n}\n\nconst _locationInputValidate = (locCtx) => {\n  log('Validating reminder inputs...');\n  const isNameValid = _isInvalid(locCtx.state.locationName);\n  const isAddressValid = _isInvalid(locCtx.state.address);\n  const isImageUrlValid = _isInvalid(locCtx.state.imageUrl);\n  const isMaxOccValid = _isInvalid(locCtx.state.maxOccupancy);\n  const isDescValid = _isInvalid(locCtx.state.description);\n\n  locCtx.setState({\n    isNameValid: isNameValid,\n    isAddressValid: isAddressValid,\n    isImageUrlValid: isImageUrlValid,\n    isMaxOccValid: isMaxOccValid,\n    isDescValid: isDescValid,\n  });\n\n  return isNameValid && isAddressValid && isImageUrlValid && isMaxOccValid && isDescValid;\n};\n\nconst _isInvalid = (value) => {\n  return value !== null && value !== undefined && value !== '' && value !== 'select' && value !== 'undefined';\n};\n"]},"metadata":{},"sourceType":"module"}