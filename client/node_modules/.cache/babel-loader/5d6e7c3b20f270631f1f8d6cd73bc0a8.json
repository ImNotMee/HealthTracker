{"ast":null,"code":"'use-strict';import _defineProperty from\"/Users/cd/Desktop/team27/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";import _classCallCheck from\"/Users/cd/Desktop/team27/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import{HEALTH_CATEGORIES,USER_ACCOUNT_TYPE}from'../constants';var log=console.log;export var addUserHandler=function addUserHandler(ctx,newUser){log('Adding user...');var users=ctx.state.userDB;users[newUser.hash]=newUser;ctx.setState({userDB:users});log(ctx.state.userDB);};export var signUpUser=function signUpUser(signUpCtx){log('Creating user...');if(_signUpInputValidate(signUpCtx)){var inputs=signUpCtx.state;var newUser=new User(inputs.first,inputs.last,inputs.email,inputs.password,inputs.sex);signUpCtx.props.addUserHandler(newUser);log('User successfully added');}else{log('Unsuccessful in adding user');}_clearSignUpInputs(signUpCtx);};var _signUpInputValidate=function _signUpInputValidate(signUpCtx){log('Validating sign-up inputs...');var isFirstValid=_isInvalid(signUpCtx.state.first);var isLastValid=_isInvalid(signUpCtx.state.last);var isEmailValid=_isInvalid(signUpCtx.state.email)&&_isEmailValid(signUpCtx.props.users,signUpCtx.state.email);var isPassValid=_isInvalid(signUpCtx.state.password);var isSexValid=_isInvalid(signUpCtx.state.sex);signUpCtx.setState({isFirstValid:isFirstValid,isLastValid:isLastValid,isEmailValid:isEmailValid,isPassValid:isPassValid,isSexValid:isSexValid});return isFirstValid&&isLastValid&&isEmailValid&&isPassValid&&isSexValid;};var _isEmailValid=function _isEmailValid(users,email){for(var key in users){if(users[key].email===email){return false;}}return true;};var _isInvalid=function _isInvalid(value){return value!==null&&value!==undefined&&value!==''&&value!=='select';};export var User=function User(firstName,lastName,email,password,sex){var _this=this,_this$reminders;_classCallCheck(this,User);this.getHash=function(){return _this.hash;};this.firstName=firstName;this.lastName=lastName;this.email=email;this.password=password;this.type=USER_ACCOUNT_TYPE;this.sex=sex;this.hash=this.email+this.password;this.reminders=(_this$reminders={},_defineProperty(_this$reminders,HEALTH_CATEGORIES.medical,[]),_defineProperty(_this$reminders,HEALTH_CATEGORIES.mental,[]),_defineProperty(_this$reminders,HEALTH_CATEGORIES.phsycial,[]),_this$reminders);this.notifications=[];};var _clearSignUpInputs=function _clearSignUpInputs(ctx){ctx.setState({first:'',last:'',email:'',password:'',sex:''});};","map":{"version":3,"sources":["/Users/cd/Desktop/team27/src/js/actions/signUp.js"],"names":["HEALTH_CATEGORIES","USER_ACCOUNT_TYPE","log","console","addUserHandler","ctx","newUser","users","state","userDB","hash","setState","signUpUser","signUpCtx","_signUpInputValidate","inputs","User","first","last","email","password","sex","props","_clearSignUpInputs","isFirstValid","_isInvalid","isLastValid","isEmailValid","_isEmailValid","isPassValid","isSexValid","key","value","undefined","firstName","lastName","getHash","type","reminders","medical","mental","phsycial","notifications"],"mappings":"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","sourcesContent":["'use-strict';\nimport { HEALTH_CATEGORIES, USER_ACCOUNT_TYPE } from '../constants';\n\nconst log = console.log;\n\nexport const addUserHandler = (ctx, newUser) => {\n  log('Adding user...');\n  const users = ctx.state.userDB;\n\n  users[newUser.hash] = newUser;\n  ctx.setState({\n    userDB: users,\n  });\n  log(ctx.state.userDB);\n};\n\nexport const signUpUser = (signUpCtx) => {\n  log('Creating user...');\n  if (_signUpInputValidate(signUpCtx)) {\n    const inputs = signUpCtx.state;\n    const newUser = new User(inputs.first, inputs.last, inputs.email, inputs.password, inputs.sex);\n    signUpCtx.props.addUserHandler(newUser);\n    log('User successfully added');\n  } else {\n    log('Unsuccessful in adding user');\n  }\n  _clearSignUpInputs(signUpCtx);\n};\n\nconst _signUpInputValidate = (signUpCtx) => {\n  log('Validating sign-up inputs...');\n  const isFirstValid = _isInvalid(signUpCtx.state.first);\n  const isLastValid = _isInvalid(signUpCtx.state.last);\n  const isEmailValid =\n    _isInvalid(signUpCtx.state.email) &&\n    _isEmailValid(signUpCtx.props.users, signUpCtx.state.email);\n  const isPassValid = _isInvalid(signUpCtx.state.password);\n  const isSexValid = _isInvalid(signUpCtx.state.sex);\n\n  signUpCtx.setState({\n    isFirstValid: isFirstValid,\n    isLastValid: isLastValid,\n    isEmailValid: isEmailValid,\n    isPassValid: isPassValid,\n    isSexValid: isSexValid,\n  });\n\n  return isFirstValid && isLastValid && isEmailValid && isPassValid && isSexValid;\n};\n\nconst _isEmailValid = (users, email) => {\n  for (let key in users) {\n    if (users[key].email === email) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst _isInvalid = (value) => {\n  return value !== null && value !== undefined && value !== '' && value !== 'select';\n};\n\nexport class User {\n  constructor(firstName, lastName, email, password, sex) {\n    this.firstName = firstName;\n    this.lastName = lastName;\n    this.email = email;\n    this.password = password;\n    this.type = USER_ACCOUNT_TYPE;\n    this.sex = sex;\n    this.hash = this.email + this.password;\n    this.reminders = {\n      [HEALTH_CATEGORIES.medical]: [],\n      [HEALTH_CATEGORIES.mental]: [],\n      [HEALTH_CATEGORIES.phsycial]: [],\n    };\n    this.notifications = [];\n  }\n\n  getHash = () => {\n    return this.hash;\n  };\n}\n\nconst _clearSignUpInputs = (ctx) => {\n  ctx.setState({\n    first: '',\n    last: '',\n    email: '',\n    password: '',\n    sex: '',\n  });\n};\n"]},"metadata":{},"sourceType":"module"}