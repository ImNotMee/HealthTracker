{"ast":null,"code":"'use-strict';import _classCallCheck from\"/Users/cd/Desktop/team27/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import reminderSound from'../../assets/light.mp3';import{NOTIFICATION_TYPE}from'../constants';var log=console.log;export var addNotificationHandler=function addNotificationHandler(ctx,type,title,message){log('Creating notification...');var notif=new Notification(type,title,message);var user=ctx.state.activeUser;user.notifications.push(notif);ctx.setState({activeUser:user});log('Successfully created notification',ctx.state.activeUser.notifications);};export var removeNotificationHandler=function removeNotificationHandler(ctx,id){var user=ctx.state.activeUser;var notifications=user.notifications;var index=_getNotificationIndex(notifications,id);notifications.splice(index,1);user.notifications=notifications;ctx.setState({activeUser:user});};var _getNotificationIndex=function _getNotificationIndex(list,id){var i;for(i=0;i<list.length;i++){if(list[i].id===id){return i;}}};export var addTimerHandler=function addTimerHandler(ctx,id,timer){var user=ctx.state.activeUser;user.timers.push({id:id,timer:timer});ctx.setState({activeUser:user});};export var Notification=function Notification(type,title,message){_classCallCheck(this,Notification);this._generateId=function(){return'n'+Math.random().toString(36).substr(3,8);};this.type=type;this.title=title;this.message=message;this.id=this._generateId();};export var playSound=function playSound(){var rAudio=new Audio(reminderSound);rAudio.play();};export var getNumNotifs=function getNumNotifs(notifications,type){var count=0;var i;for(i=0;i<(notifications===null||notifications===void 0?void 0:notifications.length);i++){if(notifications[i].type===type){count+=1;}}return count;};","map":{"version":3,"sources":["/Users/cd/Desktop/team27/src/js/actions/notification.js"],"names":["reminderSound","NOTIFICATION_TYPE","log","console","addNotificationHandler","ctx","type","title","message","notif","Notification","user","state","activeUser","notifications","push","setState","removeNotificationHandler","id","index","_getNotificationIndex","splice","list","i","length","addTimerHandler","timer","timers","_generateId","Math","random","toString","substr","playSound","rAudio","Audio","play","getNumNotifs","count"],"mappings":"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","sourcesContent":["'use-strict';\nimport reminderSound from '../../assets/light.mp3';\nimport { NOTIFICATION_TYPE } from '../constants';\n\nconst log = console.log;\n\nexport const addNotificationHandler = (ctx, type, title, message) => {\n  log('Creating notification...');\n  const notif = new Notification(type, title, message);\n  const user = ctx.state.activeUser;\n  user.notifications.push(notif);\n  ctx.setState({\n    activeUser: user,\n  });\n  log('Successfully created notification', ctx.state.activeUser.notifications);\n};\n\nexport const removeNotificationHandler = (ctx, id) => {\n  const user = ctx.state.activeUser;\n  const notifications = user.notifications;\n  const index = _getNotificationIndex(notifications, id);\n  notifications.splice(index, 1);\n  user.notifications = notifications;\n  ctx.setState({\n    activeUser: user,\n  });\n};\n\nconst _getNotificationIndex = (list, id) => {\n  let i;\n  for (i = 0; i < list.length; i++) {\n    if (list[i].id === id) {\n      return i;\n    }\n  }\n};\n\nexport const addTimerHandler = (ctx, id, timer) => {\n  const user = ctx.state.activeUser;\n  user.timers.push({ id: id, timer: timer });\n  ctx.setState({\n    activeUser: user,\n  });\n};\n\nexport class Notification {\n  constructor(type, title, message) {\n    this.type = type;\n    this.title = title;\n    this.message = message;\n    this.id = this._generateId();\n  }\n\n  _generateId = () => {\n    return 'n' + Math.random().toString(36).substr(3, 8);\n  };\n}\n\nexport const playSound = () => {\n  let rAudio = new Audio(reminderSound);\n  rAudio.play();\n};\n\nexport const getNumNotifs = (notifications, type) => {\n  let count = 0;\n  let i;\n  for (i = 0; i < notifications?.length; i++) {\n    if (notifications[i].type === type) {\n      count += 1;\n    }\n  }\n  return count;\n};\n"]},"metadata":{},"sourceType":"module"}