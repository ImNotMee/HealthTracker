{"ast":null,"code":"var _jsxFileName = \"/Users/cd/Desktop/team27/src/js/components/Reminders/AddReminder/index.js\";\nimport React, { Component } from 'react';\nimport { Redirect } from 'react-router-dom';\nimport ListSelector from '../../General/ListSelector';\nimport { onSelectHandler, onInputChangeHandler } from '../../../actions/utils';\nimport './styles.css';\nimport { HEALTH_CATEGORIES, HEALTH_SUB_CATEGORIES, ADMIN_ACCOUNT_TYPE, ADMIN_REMINDER_TYPES } from '../../../constants';\n\nclass AddReminder extends Component {\n  constructor(...args) {\n    var _this$props$match, _this$props$match2, _this$props$match3, _this$props$match4, _this$props$match5;\n\n    super(...args);\n    this.state = {\n      category: (_this$props$match = this.props.match) === null || _this$props$match === void 0 ? void 0 : _this$props$match.params.cat,\n      subCategory: (_this$props$match2 = this.props.match) === null || _this$props$match2 === void 0 ? void 0 : _this$props$match2.params.sub,\n      reminderName: (_this$props$match3 = this.props.match) === null || _this$props$match3 === void 0 ? void 0 : _this$props$match3.params.name,\n      reminderTime: (_this$props$match4 = this.props.match) === null || _this$props$match4 === void 0 ? void 0 : _this$props$match4.params.time,\n      reminderNote: (_this$props$match5 = this.props.match) === null || _this$props$match5 === void 0 ? void 0 : _this$props$match5.params.note,\n      isCategoryValid: true,\n      isSubCategoryValid: true,\n      isNameValid: true,\n      isDateTimeValid: true,\n      isNoteValid: true,\n      newReminderAdded: false\n    };\n\n    this.goToReminders = () => {\n      if (this.state.newReminderAdded) {\n        return /*#__PURE__*/React.createElement(Redirect, {\n          to: \"/reminders\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 30,\n            columnNumber: 14\n          }\n        });\n      }\n    };\n\n    this.displayErrorMsg = () => {\n      const {\n        isCategoryValid,\n        isSubCategoryValid,\n        isNameValid,\n        isDateTimeValid\n      } = this.state;\n\n      if (isCategoryValid && isSubCategoryValid && isNameValid && isDateTimeValid) {\n        return '';\n      } else {\n        return /*#__PURE__*/React.createElement(\"span\", {\n          className: \"errorMsg\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 39,\n            columnNumber: 14\n          }\n        }, \" Input fields in red are missing \");\n      }\n    };\n  }\n\n  render() {\n    var _this$props$match6;\n\n    const {\n      activeUser\n    } = this.props;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      id: \"AddReminderWrapper\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 7\n      }\n    }, this.goToReminders(), /*#__PURE__*/React.createElement(\"div\", {\n      id: \"AddReminderWindow\",\n      className: \"windowWrapper\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 11\n      }\n    }, \" Add Reminder \"), this.displayErrorMsg(), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"reminderInputWrapper\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      className: \"inputLabel\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 13\n      }\n    }, \" Category: \"), /*#__PURE__*/React.createElement(ListSelector, {\n      id: \"HealthCatList\",\n      className: this.state.isCategoryValid ? '' : 'invalidInput',\n      name: \"categories\",\n      autoComplete: \"false\",\n      defaultValue: this.state.category === undefined ? '' : this.state.category,\n      options: activeUser.type === ADMIN_ACCOUNT_TYPE ? Object.values(ADMIN_REMINDER_TYPES) : Object.values(HEALTH_CATEGORIES),\n      onChangeHandler: event => {\n        onSelectHandler(this, event, 'category');\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 13\n      }\n    })), this.state.category !== undefined && activeUser.type !== ADMIN_ACCOUNT_TYPE ? /*#__PURE__*/React.createElement(\"div\", {\n      className: \"reminderInputWrapper\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      className: \"inputLabel\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 15\n      }\n    }, \" Sub-Category: \"), /*#__PURE__*/React.createElement(ListSelector, {\n      id: \"SubHealthCatList\",\n      className: this.state.isSubCategoryValid ? '' : 'invalidInput',\n      name: \"subCategories\",\n      autoComplete: \"false\",\n      defaultValue: this.state.subCategory === undefined ? '' : this.state.subCategory,\n      options: HEALTH_SUB_CATEGORIES[this.state.category],\n      onChangeHandler: event => {\n        onSelectHandler(this, event, 'subCategory');\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 15\n      }\n    })) : '', /*#__PURE__*/React.createElement(\"div\", {\n      className: \"reminderInputWrapper\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      className: \"inputLabel\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 13\n      }\n    }, \" Title: \"), /*#__PURE__*/React.createElement(\"input\", {\n      id: \"ReminderTitleInput\",\n      className: `input ${this.state.isNameValid ? '' : 'invalidInput'}`,\n      type: \"text\",\n      name: \"reminderName\",\n      value: this.state.reminderName === undefined ? '' : this.state.reminderName,\n      placeholder: \"Title\",\n      onChange: event => {\n        onInputChangeHandler(this, event);\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 13\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"reminderInputWrapper\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      className: \"inputLabel\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 13\n      }\n    }, \" When to remind: \"), /*#__PURE__*/React.createElement(\"input\", {\n      className: `input ${this.state.isDateTimeValid ? '' : 'invalidInput'}`,\n      type: \"datetime-local\",\n      id: \"DateTimeInput\",\n      name: \"reminderTime\",\n      value: this.state.reminderTime === undefined ? '' : this.state.reminderTime,\n      min: new Date(),\n      onChange: event => {\n        onInputChangeHandler(this, event);\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 13\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"reminderInputWrapper\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      className: \"inputLabel\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 13\n      }\n    }, \" Notes: \"), /*#__PURE__*/React.createElement(\"textarea\", {\n      id: \"ReminderNotesInput\",\n      className: `input ${this.state.isNoteValid ? '' : 'invalidInput'}`,\n      name: \"reminderNote\",\n      maxLength: \"225\",\n      placeholder: \"Notes\",\n      value: this.state.reminderNote === undefined ? '' : this.state.reminderNote,\n      onChange: event => {\n        onInputChangeHandler(this, event);\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(\"span\", {\n      className: \"charCount\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 13\n      }\n    }, this.state.reminderNote !== undefined ? this.state['reminderNote'].length : '0', \"/225\")), ((_this$props$match6 = this.props.match) === null || _this$props$match6 === void 0 ? void 0 : _this$props$match6.params.id) !== undefined ? /*#__PURE__*/React.createElement(\"button\", {\n      className: \"primary-btn\",\n      onClick: () => {\n        this.props.editReminderHandler(this, this.props.match.params.cat, this.props.match.params.id);\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 13\n      }\n    }, ' ', \"Edit\", ' ') : /*#__PURE__*/React.createElement(\"button\", {\n      className: \"primary-btn\",\n      onClick: () => {\n        this.props.addReminderHandler(this);\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 13\n      }\n    }, ' ', \"Add\", ' ')));\n  }\n\n}\n\nexport default AddReminder;","map":{"version":3,"sources":["/Users/cd/Desktop/team27/src/js/components/Reminders/AddReminder/index.js"],"names":["React","Component","Redirect","ListSelector","onSelectHandler","onInputChangeHandler","HEALTH_CATEGORIES","HEALTH_SUB_CATEGORIES","ADMIN_ACCOUNT_TYPE","ADMIN_REMINDER_TYPES","AddReminder","state","category","props","match","params","cat","subCategory","sub","reminderName","name","reminderTime","time","reminderNote","note","isCategoryValid","isSubCategoryValid","isNameValid","isDateTimeValid","isNoteValid","newReminderAdded","goToReminders","displayErrorMsg","render","activeUser","undefined","type","Object","values","event","Date","length","id","editReminderHandler","addReminderHandler"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,QAAT,QAAyB,kBAAzB;AACA,OAAOC,YAAP,MAAyB,4BAAzB;AACA,SAASC,eAAT,EAA0BC,oBAA1B,QAAsD,wBAAtD;AACA,OAAO,cAAP;AACA,SACEC,iBADF,EAEEC,qBAFF,EAGEC,kBAHF,EAIEC,oBAJF,QAKO,oBALP;;AAOA,MAAMC,WAAN,SAA0BT,SAA1B,CAAoC;AAAA;AAAA;;AAAA;AAAA,SAClCU,KADkC,GAC1B;AACNC,MAAAA,QAAQ,uBAAE,KAAKC,KAAL,CAAWC,KAAb,sDAAE,kBAAkBC,MAAlB,CAAyBC,GAD7B;AAENC,MAAAA,WAAW,wBAAE,KAAKJ,KAAL,CAAWC,KAAb,uDAAE,mBAAkBC,MAAlB,CAAyBG,GAFhC;AAGNC,MAAAA,YAAY,wBAAE,KAAKN,KAAL,CAAWC,KAAb,uDAAE,mBAAkBC,MAAlB,CAAyBK,IAHjC;AAINC,MAAAA,YAAY,wBAAE,KAAKR,KAAL,CAAWC,KAAb,uDAAE,mBAAkBC,MAAlB,CAAyBO,IAJjC;AAKNC,MAAAA,YAAY,wBAAE,KAAKV,KAAL,CAAWC,KAAb,uDAAE,mBAAkBC,MAAlB,CAAyBS,IALjC;AAMNC,MAAAA,eAAe,EAAE,IANX;AAONC,MAAAA,kBAAkB,EAAE,IAPd;AAQNC,MAAAA,WAAW,EAAE,IARP;AASNC,MAAAA,eAAe,EAAE,IATX;AAUNC,MAAAA,WAAW,EAAE,IAVP;AAWNC,MAAAA,gBAAgB,EAAE;AAXZ,KAD0B;;AAAA,SAelCC,aAfkC,GAelB,MAAM;AACpB,UAAI,KAAKpB,KAAL,CAAWmB,gBAAf,EAAiC;AAC/B,4BAAO,oBAAC,QAAD;AAAU,UAAA,EAAE,EAAC,YAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AACD;AACF,KAnBiC;;AAAA,SAqBlCE,eArBkC,GAqBhB,MAAM;AACtB,YAAM;AAAEP,QAAAA,eAAF;AAAmBC,QAAAA,kBAAnB;AAAuCC,QAAAA,WAAvC;AAAoDC,QAAAA;AAApD,UAAwE,KAAKjB,KAAnF;;AACA,UAAIc,eAAe,IAAIC,kBAAnB,IAAyCC,WAAzC,IAAwDC,eAA5D,EAA6E;AAC3E,eAAO,EAAP;AACD,OAFD,MAEO;AACL,4BAAO;AAAM,UAAA,SAAS,EAAC,UAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+CAAP;AACD;AACF,KA5BiC;AAAA;;AA8BlCK,EAAAA,MAAM,GAAG;AAAA;;AACP,UAAM;AAAEC,MAAAA;AAAF,QAAiB,KAAKrB,KAA5B;AACA,wBACE;AAAK,MAAA,EAAE,EAAC,oBAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACG,KAAKkB,aAAL,EADH,eAEE;AAAK,MAAA,EAAE,EAAC,mBAAR;AAA4B,MAAA,SAAS,EAAC,eAAtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBADF,EAEG,KAAKC,eAAL,EAFH,eAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAHF,eAIE;AAAK,MAAA,SAAS,EAAC,sBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAM,MAAA,SAAS,EAAC,YAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBADF,eAEE,oBAAC,YAAD;AACE,MAAA,EAAE,EAAC,eADL;AAEE,MAAA,SAAS,EAAE,KAAKrB,KAAL,CAAWc,eAAX,GAA6B,EAA7B,GAAkC,cAF/C;AAGE,MAAA,IAAI,EAAC,YAHP;AAIE,MAAA,YAAY,EAAC,OAJf;AAKE,MAAA,YAAY,EAAE,KAAKd,KAAL,CAAWC,QAAX,KAAwBuB,SAAxB,GAAoC,EAApC,GAAyC,KAAKxB,KAAL,CAAWC,QALpE;AAME,MAAA,OAAO,EACLsB,UAAU,CAACE,IAAX,KAAoB5B,kBAApB,GACI6B,MAAM,CAACC,MAAP,CAAc7B,oBAAd,CADJ,GAEI4B,MAAM,CAACC,MAAP,CAAchC,iBAAd,CATR;AAWE,MAAA,eAAe,EAAGiC,KAAD,IAAW;AAC1BnC,QAAAA,eAAe,CAAC,IAAD,EAAOmC,KAAP,EAAc,UAAd,CAAf;AACD,OAbH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFF,CAJF,EAsBG,KAAK5B,KAAL,CAAWC,QAAX,KAAwBuB,SAAxB,IAAqCD,UAAU,CAACE,IAAX,KAAoB5B,kBAAzD,gBACC;AAAK,MAAA,SAAS,EAAC,sBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAM,MAAA,SAAS,EAAC,YAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBADF,eAEE,oBAAC,YAAD;AACE,MAAA,EAAE,EAAC,kBADL;AAEE,MAAA,SAAS,EAAE,KAAKG,KAAL,CAAWe,kBAAX,GAAgC,EAAhC,GAAqC,cAFlD;AAGE,MAAA,IAAI,EAAC,eAHP;AAIE,MAAA,YAAY,EAAC,OAJf;AAKE,MAAA,YAAY,EAAE,KAAKf,KAAL,CAAWM,WAAX,KAA2BkB,SAA3B,GAAuC,EAAvC,GAA4C,KAAKxB,KAAL,CAAWM,WALvE;AAME,MAAA,OAAO,EAAEV,qBAAqB,CAAC,KAAKI,KAAL,CAAWC,QAAZ,CANhC;AAOE,MAAA,eAAe,EAAG2B,KAAD,IAAW;AAC1BnC,QAAAA,eAAe,CAAC,IAAD,EAAOmC,KAAP,EAAc,aAAd,CAAf;AACD,OATH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFF,CADD,GAgBC,EAtCJ,eAwCE;AAAK,MAAA,SAAS,EAAC,sBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAM,MAAA,SAAS,EAAC,YAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADF,eAEE;AACE,MAAA,EAAE,EAAC,oBADL;AAEE,MAAA,SAAS,EAAG,SAAQ,KAAK5B,KAAL,CAAWgB,WAAX,GAAyB,EAAzB,GAA8B,cAAe,EAFnE;AAGE,MAAA,IAAI,EAAC,MAHP;AAIE,MAAA,IAAI,EAAC,cAJP;AAKE,MAAA,KAAK,EAAE,KAAKhB,KAAL,CAAWQ,YAAX,KAA4BgB,SAA5B,GAAwC,EAAxC,GAA6C,KAAKxB,KAAL,CAAWQ,YALjE;AAME,MAAA,WAAW,EAAC,OANd;AAOE,MAAA,QAAQ,EAAGoB,KAAD,IAAW;AACnBlC,QAAAA,oBAAoB,CAAC,IAAD,EAAOkC,KAAP,CAApB;AACD,OATH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFF,CAxCF,eAsDE;AAAK,MAAA,SAAS,EAAC,sBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAM,MAAA,SAAS,EAAC,YAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2BADF,eAEE;AACE,MAAA,SAAS,EAAG,SAAQ,KAAK5B,KAAL,CAAWiB,eAAX,GAA6B,EAA7B,GAAkC,cAAe,EADvE;AAEE,MAAA,IAAI,EAAC,gBAFP;AAGE,MAAA,EAAE,EAAC,eAHL;AAIE,MAAA,IAAI,EAAC,cAJP;AAKE,MAAA,KAAK,EAAE,KAAKjB,KAAL,CAAWU,YAAX,KAA4Bc,SAA5B,GAAwC,EAAxC,GAA6C,KAAKxB,KAAL,CAAWU,YALjE;AAME,MAAA,GAAG,EAAE,IAAImB,IAAJ,EANP;AAOE,MAAA,QAAQ,EAAGD,KAAD,IAAW;AACnBlC,QAAAA,oBAAoB,CAAC,IAAD,EAAOkC,KAAP,CAApB;AACD,OATH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFF,CAtDF,eAoEE;AAAK,MAAA,SAAS,EAAC,sBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAM,MAAA,SAAS,EAAC,YAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADF,eAEE;AACE,MAAA,EAAE,EAAC,oBADL;AAEE,MAAA,SAAS,EAAG,SAAQ,KAAK5B,KAAL,CAAWkB,WAAX,GAAyB,EAAzB,GAA8B,cAAe,EAFnE;AAGE,MAAA,IAAI,EAAC,cAHP;AAIE,MAAA,SAAS,EAAC,KAJZ;AAKE,MAAA,WAAW,EAAC,OALd;AAME,MAAA,KAAK,EAAE,KAAKlB,KAAL,CAAWY,YAAX,KAA4BY,SAA5B,GAAwC,EAAxC,GAA6C,KAAKxB,KAAL,CAAWY,YANjE;AAOE,MAAA,QAAQ,EAAGgB,KAAD,IAAW;AACnBlC,QAAAA,oBAAoB,CAAC,IAAD,EAAOkC,KAAP,CAApB;AACD,OATH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFF,eAaE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAbF,eAcE;AAAM,MAAA,SAAS,EAAC,WAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACG,KAAK5B,KAAL,CAAWY,YAAX,KAA4BY,SAA5B,GAAwC,KAAKxB,KAAL,CAAW,cAAX,EAA2B8B,MAAnE,GAA4E,GAD/E,SAdF,CApEF,EAsFG,4BAAK5B,KAAL,CAAWC,KAAX,0EAAkBC,MAAlB,CAAyB2B,EAAzB,MAAgCP,SAAhC,gBACC;AACE,MAAA,SAAS,EAAC,aADZ;AAEE,MAAA,OAAO,EAAE,MAAM;AACb,aAAKtB,KAAL,CAAW8B,mBAAX,CACE,IADF,EAEE,KAAK9B,KAAL,CAAWC,KAAX,CAAiBC,MAAjB,CAAwBC,GAF1B,EAGE,KAAKH,KAAL,CAAWC,KAAX,CAAiBC,MAAjB,CAAwB2B,EAH1B;AAKD,OARH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAUG,GAVH,UAWO,GAXP,CADD,gBAeC;AACE,MAAA,SAAS,EAAC,aADZ;AAEE,MAAA,OAAO,EAAE,MAAM;AACb,aAAK7B,KAAL,CAAW+B,kBAAX,CAA8B,IAA9B;AACD,OAJH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAMG,GANH,SAOM,GAPN,CArGJ,CAFF,CADF;AAqHD;;AArJiC;;AAwJpC,eAAelC,WAAf","sourcesContent":["import React, { Component } from 'react';\nimport { Redirect } from 'react-router-dom';\nimport ListSelector from '../../General/ListSelector';\nimport { onSelectHandler, onInputChangeHandler } from '../../../actions/utils';\nimport './styles.css';\nimport {\n  HEALTH_CATEGORIES,\n  HEALTH_SUB_CATEGORIES,\n  ADMIN_ACCOUNT_TYPE,\n  ADMIN_REMINDER_TYPES,\n} from '../../../constants';\n\nclass AddReminder extends Component {\n  state = {\n    category: this.props.match?.params.cat,\n    subCategory: this.props.match?.params.sub,\n    reminderName: this.props.match?.params.name,\n    reminderTime: this.props.match?.params.time,\n    reminderNote: this.props.match?.params.note,\n    isCategoryValid: true,\n    isSubCategoryValid: true,\n    isNameValid: true,\n    isDateTimeValid: true,\n    isNoteValid: true,\n    newReminderAdded: false,\n  };\n\n  goToReminders = () => {\n    if (this.state.newReminderAdded) {\n      return <Redirect to=\"/reminders\" />;\n    }\n  };\n\n  displayErrorMsg = () => {\n    const { isCategoryValid, isSubCategoryValid, isNameValid, isDateTimeValid } = this.state;\n    if (isCategoryValid && isSubCategoryValid && isNameValid && isDateTimeValid) {\n      return '';\n    } else {\n      return <span className=\"errorMsg\"> Input fields in red are missing </span>;\n    }\n  };\n\n  render() {\n    const { activeUser } = this.props;\n    return (\n      <div id=\"AddReminderWrapper\">\n        {this.goToReminders()}\n        <div id=\"AddReminderWindow\" className=\"windowWrapper\">\n          <h1> Add Reminder </h1>\n          {this.displayErrorMsg()}\n          <br />\n          <div className=\"reminderInputWrapper\">\n            <span className=\"inputLabel\"> Category: </span>\n            <ListSelector\n              id=\"HealthCatList\"\n              className={this.state.isCategoryValid ? '' : 'invalidInput'}\n              name=\"categories\"\n              autoComplete=\"false\"\n              defaultValue={this.state.category === undefined ? '' : this.state.category}\n              options={\n                activeUser.type === ADMIN_ACCOUNT_TYPE\n                  ? Object.values(ADMIN_REMINDER_TYPES)\n                  : Object.values(HEALTH_CATEGORIES)\n              }\n              onChangeHandler={(event) => {\n                onSelectHandler(this, event, 'category');\n              }}\n            />\n          </div>\n          {this.state.category !== undefined && activeUser.type !== ADMIN_ACCOUNT_TYPE ? (\n            <div className=\"reminderInputWrapper\">\n              <span className=\"inputLabel\"> Sub-Category: </span>\n              <ListSelector\n                id=\"SubHealthCatList\"\n                className={this.state.isSubCategoryValid ? '' : 'invalidInput'}\n                name=\"subCategories\"\n                autoComplete=\"false\"\n                defaultValue={this.state.subCategory === undefined ? '' : this.state.subCategory}\n                options={HEALTH_SUB_CATEGORIES[this.state.category]}\n                onChangeHandler={(event) => {\n                  onSelectHandler(this, event, 'subCategory');\n                }}\n              />\n            </div>\n          ) : (\n            ''\n          )}\n          <div className=\"reminderInputWrapper\">\n            <span className=\"inputLabel\"> Title: </span>\n            <input\n              id=\"ReminderTitleInput\"\n              className={`input ${this.state.isNameValid ? '' : 'invalidInput'}`}\n              type=\"text\"\n              name=\"reminderName\"\n              value={this.state.reminderName === undefined ? '' : this.state.reminderName}\n              placeholder=\"Title\"\n              onChange={(event) => {\n                onInputChangeHandler(this, event);\n              }}\n            />\n          </div>\n          <div className=\"reminderInputWrapper\">\n            <span className=\"inputLabel\"> When to remind: </span>\n            <input\n              className={`input ${this.state.isDateTimeValid ? '' : 'invalidInput'}`}\n              type=\"datetime-local\"\n              id=\"DateTimeInput\"\n              name=\"reminderTime\"\n              value={this.state.reminderTime === undefined ? '' : this.state.reminderTime}\n              min={new Date()}\n              onChange={(event) => {\n                onInputChangeHandler(this, event);\n              }}\n            />\n          </div>\n          <div className=\"reminderInputWrapper\">\n            <span className=\"inputLabel\"> Notes: </span>\n            <textarea\n              id=\"ReminderNotesInput\"\n              className={`input ${this.state.isNoteValid ? '' : 'invalidInput'}`}\n              name=\"reminderNote\"\n              maxLength=\"225\"\n              placeholder=\"Notes\"\n              value={this.state.reminderNote === undefined ? '' : this.state.reminderNote}\n              onChange={(event) => {\n                onInputChangeHandler(this, event);\n              }}\n            />\n            <br />\n            <span className=\"charCount\">\n              {this.state.reminderNote !== undefined ? this.state['reminderNote'].length : '0'}/225\n            </span>\n          </div>\n          {this.props.match?.params.id !== undefined ? (\n            <button\n              className=\"primary-btn\"\n              onClick={() => {\n                this.props.editReminderHandler(\n                  this,\n                  this.props.match.params.cat,\n                  this.props.match.params.id,\n                );\n              }}\n            >\n              {' '}\n              Edit{' '}\n            </button>\n          ) : (\n            <button\n              className=\"primary-btn\"\n              onClick={() => {\n                this.props.addReminderHandler(this);\n              }}\n            >\n              {' '}\n              Add{' '}\n            </button>\n          )}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default AddReminder;\n"]},"metadata":{},"sourceType":"module"}