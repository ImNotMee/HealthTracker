{"ast":null,"code":"import { NOTIFICATION_TYPE, USER_ACCOUNT_TYPE } from '../constants';\nimport { Notification } from './notification';\nconst log = console.log;\nexport const sendAlertHandler = (ctx, location) => {\n  log('Alerting users...');\n  const users = ctx.state.userDB;\n\n  for (let key in users) {\n    let user = users[key];\n\n    if (user.type === USER_ACCOUNT_TYPE && _wasUserCheckedIn(user, location)) {\n      let notif = new Notification(NOTIFICATION_TYPE.alert, 'You May Have COVID', `A covid case has been reported at ${location.name}`);\n      user.notifications.push(notif);\n      users[key] = user;\n    }\n  }\n\n  ctx.setState({\n    userDB: users\n  }, () => {\n    log('Successfully alerted users ' + JSON.stringify(ctx.state.userDB));\n  });\n};\n\nconst _wasUserCheckedIn = (user, location) => {\n  const locs = user.checkInHistory;\n\n  for (let loc in locs) {\n    if (loc.id === location.id) {\n      return true;\n    }\n  }\n\n  return false;\n};\n\nexport const addLocationHandler = (ctx, addLocCtx) => {\n  log(\"Adding new location...\");\n  const locDB = ctx.state.locationsDB;\n  const {\n    locationName,\n    address,\n    imageUrl,\n    maxOccupancy,\n    description\n  } = addLocCtx.state;\n  let newLoc = new Location(locationName, maxOccupancy, address, description, imageUrl);\n  locDB[newLoc.id] = newLoc;\n  ctx.setState({\n    locationsDB: locDB\n  });\n  log(\"Successfully added new location to DB\");\n};\n\nconst _locationInputValidate = locCtx => {\n  log('Validating reminder inputs...');\n\n  const isNameValid = _isInvalid(locCtx.state.locationName);\n\n  const sAddressValid = _isInvalid(locCtx.state.address);\n\n  const isImageUrlValid = _isInvalid(locCtx.state.imageUrl);\n\n  const isMaxOccValid = _isInvalid(locCtx.state.maxOccupancy);\n\n  const isDescValid = _isInvalid(locCtx.state.description);\n\n  reminderCtx.setState({\n    isNameValid: isNameValid,\n    isAddressValid: sAddressValid,\n    isImageUrlValid: isImageUrlValid,\n    isMaxOccValid: isMaxOccValid,\n    isDescValid: isDescValid\n  });\n  return isCategoryValid && isSubCategoryValid && isNameValid && isDateTimeValid;\n};\n\nconst _isInvalid = value => {\n  return value !== null && value !== undefined && value !== '' && value !== 'select';\n};","map":{"version":3,"sources":["/Users/cd/Desktop/team27/src/js/actions/adminCheckIn.js"],"names":["NOTIFICATION_TYPE","USER_ACCOUNT_TYPE","Notification","log","console","sendAlertHandler","ctx","location","users","state","userDB","key","user","type","_wasUserCheckedIn","notif","alert","name","notifications","push","setState","JSON","stringify","locs","checkInHistory","loc","id","addLocationHandler","addLocCtx","locDB","locationsDB","locationName","address","imageUrl","maxOccupancy","description","newLoc","Location","_locationInputValidate","locCtx","isNameValid","_isInvalid","sAddressValid","isImageUrlValid","isMaxOccValid","isDescValid","reminderCtx","isAddressValid","isCategoryValid","isSubCategoryValid","isDateTimeValid","value","undefined"],"mappings":"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","sourcesContent":["import { NOTIFICATION_TYPE, USER_ACCOUNT_TYPE } from '../constants';\nimport { Notification } from './notification';\n\nconst log = console.log;\n\nexport const sendAlertHandler = (ctx, location) => {\n  log('Alerting users...');\n  const users = ctx.state.userDB;\n  for (let key in users) {\n    let user = users[key];\n    if (user.type === USER_ACCOUNT_TYPE && _wasUserCheckedIn(user, location)) {\n      let notif = new Notification(\n        NOTIFICATION_TYPE.alert,\n        'You May Have COVID',\n        `A covid case has been reported at ${location.name}`,\n      );\n      user.notifications.push(notif);\n      users[key] = user;\n    }\n  }\n\n  ctx.setState(\n    {\n      userDB: users,\n    },\n    () => {\n      log('Successfully alerted users ' + JSON.stringify(ctx.state.userDB));\n    },\n  );\n};\n\nconst _wasUserCheckedIn = (user, location) => {\n  const locs = user.checkInHistory;\n  for (let loc in locs) {\n    if (loc.id === location.id) {\n      return true;\n    }\n  }\n  return false;\n};\n\nexport const addLocationHandler = (ctx, addLocCtx) => {\n  log(\"Adding new location...\");\n  const locDB = ctx.state.locationsDB;\n  const { locationName, address, imageUrl, maxOccupancy, description } = addLocCtx.state;\n  let newLoc = new Location(locationName, maxOccupancy, address, description, imageUrl);\n  locDB[newLoc.id] = newLoc;\n  ctx.setState({\n    locationsDB: locDB\n  });\n  log(\"Successfully added new location to DB\");\n}\n\nconst _locationInputValidate = (locCtx) => {\n  log('Validating reminder inputs...');\n  const isNameValid = _isInvalid(locCtx.state.locationName);\n  const sAddressValid = _isInvalid(locCtx.state.address);\n  const isImageUrlValid = _isInvalid(locCtx.state.imageUrl);\n  const isMaxOccValid = _isInvalid(locCtx.state.maxOccupancy);\n  const isDescValid =_isInvalid(locCtx.state.description);\n\n  reminderCtx.setState({\n    isNameValid: isNameValid,\n    isAddressValid: sAddressValid,\n    isImageUrlValid: isImageUrlValid,\n    isMaxOccValid: isMaxOccValid,\n    isDescValid: isDescValid,\n  });\n\n  return isCategoryValid && isSubCategoryValid && isNameValid && isDateTimeValid;\n};\n\nconst _isInvalid = (value) => {\n  return value !== null && value !== undefined && value !== '' && value !== 'select';\n};"]},"metadata":{},"sourceType":"module"}