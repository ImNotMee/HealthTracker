{"ast":null,"code":"import { REMINDER_STATUS } from \"../constants\";\nconst log = console.log;\nexport const addReminderHandler = (appCtx, reminderCtx) => {\n  log(\"Adding new reminder...\");\n\n  const isInputValid = _reminderInputValidate(reminderCtx);\n\n  log(\"Input validity status: \" + isInputValid);\n\n  if (isInputValid) {\n    _addReminder(appCtx, reminderCtx);\n\n    reminderCtx.setState({\n      newReminderAdded: true\n    });\n    log(`Successfully added new reminder '${reminderCtx.state.reminderName}'`);\n  } else {\n    log(\"Unsuccessfully in adding reminder\");\n  }\n};\n\nconst _addReminder = (appCtx, reminderCtx) => {\n  const user = appCtx.state.activeUser;\n  const {\n    category,\n    subCategory,\n    reminderName,\n    reminderTime,\n    reminderNote\n  } = reminderCtx.state;\n  const newReminder = new Reminder(category, subCategory, reminderName, reminderTime, reminderNote);\n  user.reminders[reminderCtx.state.category].push(newReminder);\n  appCtx.setState({\n    activeUser: user\n  });\n};\n\nconst _reminderInputValidate = reminderCtx => {\n  log(\"Validating reminder inputs...\");\n\n  const isCategoryValid = _isInvalid(reminderCtx.state.category);\n\n  const isSubCategoryValid = _isInvalid(reminderCtx.state.subCategory);\n\n  const isNameValid = _isInvalid(reminderCtx.state.reminderName);\n\n  const isDateTimeValid = _isInvalid(reminderCtx.state.reminderTime);\n\n  reminderCtx.setState({\n    isCategoryValid: isCategoryValid,\n    isSubCategoryValid: isSubCategoryValid,\n    isNameValid: isNameValid,\n    isDateTimeValid: isDateTimeValid\n  });\n  return isCategoryValid && isSubCategoryValid && isNameValid && isDateTimeValid;\n};\n\nconst _isInvalid = value => {\n  return value !== null && value !== undefined && value !== '' && value !== 'select';\n};\n\nexport const editReminderHandler = (appCtx, reminderCtx, category, id) => {\n  log(\"Editing reminder...\");\n  addReminderHandler(appCtx, reminderCtx);\n  const user = appCtx.state.activeUser;\n\n  const index = _getReminderIndex(user.reminders[category], id);\n\n  const redminder = user.reminders[category];\n};\nexport const completeReminderHandler = (ctx, category, id, timeout) => {\n  log(\"Updating status of reminder to completed...\");\n  setReminderStatus(ctx, category, id, REMINDER_STATUS.completed);\n  clearTimeout(timeout);\n  log(\"Successfully completed reminder\");\n};\nexport const deleteReminderHandler = (ctx, category, id, timeout) => {\n  log(\"Removing reminder...\");\n  const user = ctx.state.activeUser;\n\n  const index = _getReminderIndex(user.reminders[category], id);\n\n  const reminders = user.reminders[category];\n  const newReminders = reminders.splice(index, index);\n  user.reminders[category] = newReminders;\n  log(newReminders + reminders + user);\n  ctx.setState({\n    activeUser: user\n  });\n  clearTimeout(timeout);\n  log(\"Successfully removed reminder\");\n};\nexport const setReminderStatus = (ctx, category, id, status) => {\n  const user = ctx.state.activeUser;\n\n  const index = _getReminderIndex(user.reminders[category], id);\n\n  const reminder = user.reminders[category][index];\n  reminder.status = status;\n  user.reminders[category][id] = reminder;\n  ctx.setState({\n    activeUser: user\n  });\n};\n\nconst _getReminderIndex = (list, id) => {\n  let i;\n\n  for (i = 0; i < list.length; i++) {\n    if (list[i].id === id) {\n      return i;\n    }\n  }\n};\n\nexport class Reminder {\n  constructor(category, subCategory, name, time, note) {\n    this._generateId = () => {\n      return 'r' + Math.random().toString(36).substr(3, 8);\n    };\n\n    this.category = category;\n    this.subCategory = subCategory;\n    this.name = name;\n    this.time = time;\n    this.note = note;\n    this.id = this._generateId();\n    this.status = REMINDER_STATUS.active;\n  }\n\n}\n;","map":{"version":3,"sources":["/Users/cd/Desktop/team27/src/js/actions/reminders.js"],"names":["REMINDER_STATUS","log","console","addReminderHandler","appCtx","reminderCtx","isInputValid","_reminderInputValidate","_addReminder","setState","newReminderAdded","state","reminderName","user","activeUser","category","subCategory","reminderTime","reminderNote","newReminder","Reminder","reminders","push","isCategoryValid","_isInvalid","isSubCategoryValid","isNameValid","isDateTimeValid","value","undefined","editReminderHandler","id","index","_getReminderIndex","redminder","completeReminderHandler","ctx","timeout","setReminderStatus","completed","clearTimeout","deleteReminderHandler","newReminders","splice","status","reminder","list","i","length","constructor","name","time","note","_generateId","Math","random","toString","substr","active"],"mappings":"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","sourcesContent":["import { REMINDER_STATUS } from \"../constants\";\n\nconst log = console.log;\n\nexport const addReminderHandler = (appCtx, reminderCtx) => {\n  log(\"Adding new reminder...\");\n  const isInputValid = _reminderInputValidate(reminderCtx);\n  log(\"Input validity status: \" + isInputValid);\n  if (isInputValid) {\n    _addReminder(appCtx, reminderCtx);\n    reminderCtx.setState({\n      newReminderAdded: true\n    });\n    log(`Successfully added new reminder '${reminderCtx.state.reminderName}'`)\n  } else {\n    log(\"Unsuccessfully in adding reminder\")\n  }\n}\n\nconst _addReminder = (appCtx, reminderCtx) => {\n  const user = appCtx.state.activeUser;\n  const {category, subCategory, reminderName, reminderTime, reminderNote} = reminderCtx.state;\n  const newReminder = new Reminder(category, subCategory, reminderName, reminderTime, reminderNote);\n  user.reminders[reminderCtx.state.category].push(newReminder)\n  appCtx.setState({\n    activeUser: user\n  });\n}\n\nconst _reminderInputValidate = (reminderCtx) => {\n  log(\"Validating reminder inputs...\")\n  const isCategoryValid = _isInvalid(reminderCtx.state.category);\n  const isSubCategoryValid = _isInvalid(reminderCtx.state.subCategory);\n  const isNameValid = _isInvalid(reminderCtx.state.reminderName);\n  const isDateTimeValid = _isInvalid(reminderCtx.state.reminderTime);\n  reminderCtx.setState({\n    isCategoryValid: isCategoryValid,\n    isSubCategoryValid: isSubCategoryValid,\n    isNameValid: isNameValid,\n    isDateTimeValid: isDateTimeValid,\n  });\n\n  return isCategoryValid && isSubCategoryValid && isNameValid && isDateTimeValid;\n}\n\nconst _isInvalid = (value) => {\n  return value !== null && value !== undefined && value !== '' && value !== 'select';\n}\n\nexport const editReminderHandler = (appCtx, reminderCtx, category, id) => {\n  log(\"Editing reminder...\")\n  addReminderHandler(appCtx, reminderCtx)\n  const user = appCtx.state.activeUser;\n  const index = _getReminderIndex(user.reminders[category], id);\n  const redminder =  user.reminders[category]\n}\n\nexport const completeReminderHandler = (ctx, category, id, timeout) => {\n  log(\"Updating status of reminder to completed...\")\n  setReminderStatus(ctx, category, id, REMINDER_STATUS.completed);\n  clearTimeout(timeout);\n  log(\"Successfully completed reminder\")\n}\n\nexport const deleteReminderHandler = (ctx, category, id, timeout) => {\n  log(\"Removing reminder...\")\n  const user = ctx.state.activeUser;\n  const index = _getReminderIndex(user.reminders[category], id);\n  const reminders = user.reminders[category];\n  const newReminders = reminders.splice(index, index);\n  user.reminders[category] = newReminders;\n  log(newReminders + reminders + user)\n  ctx.setState({\n    activeUser: user\n  });\n  clearTimeout(timeout);\n  log(\"Successfully removed reminder\")\n}\n\nexport const setReminderStatus = (ctx, category, id, status) => {\n  const user = ctx.state.activeUser;\n  const index = _getReminderIndex(user.reminders[category], id);\n  const reminder = user.reminders[category][index];\n  reminder.status = status;\n  user.reminders[category][id] = reminder\n  ctx.setState({\n    activeUser: user\n  });\n}\n\nconst _getReminderIndex = (list, id) => {\n  let i;\n  for (i = 0; i < list.length; i++) {\n    if (list[i].id === id) {\n      return i\n    }\n  }\n}\n\nexport class Reminder {\n  constructor(category, subCategory, name, time, note) {\n    this.category = category;\n    this.subCategory = subCategory;\n    this.name = name;\n    this.time = time;\n    this.note = note;\n    this.id = this._generateId();\n    this.status = REMINDER_STATUS.active;\n  }\n\n  _generateId = () => { \n    return 'r' + Math.random().toString(36).substr(3, 8);\n  }\n};"]},"metadata":{},"sourceType":"module"}