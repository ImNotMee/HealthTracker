{"ast":null,"code":"const log = console.log;\nexport const addNotificationHandler = (ctx, type, title, message) => {\n  log('Creating notification...');\n  const notif = new Notification(type, title, message);\n  const user = ctx.state.activeUser;\n  user.notifications.push(notif);\n  ctx.setState({\n    activeUser: user\n  });\n  log('Successfully created notification' + ctx.state.activeUser.notifications);\n};\nexport const removeNotificationHandler = (ctx, id) => {\n  const user = ctx.state.activeUser;\n  const notifications = user.notifications;\n  console.log(notifications);\n\n  const index = _getNotificationIndex(notifications, id);\n\n  console.log(index);\n  notifications.splice(index, 1);\n  user.notifications = notifications;\n  ctx.setState({\n    activeUser: user\n  });\n};\n\nconst _getNotificationIndex = (list, id) => {\n  let i;\n\n  for (i = 0; i < list.lenght; i++) {\n    if (list[i].id === id) {\n      return i;\n    }\n  }\n};\n\nexport class Notification {\n  constructor(type, title, message) {\n    this._generateId = () => {\n      return 'n' + Math.random().toString(36).substr(3, 8);\n    };\n\n    this.type = type;\n    this.title = title;\n    this.message = message;\n    this.id = this._generateId();\n  }\n\n}","map":{"version":3,"sources":["/Users/cd/Desktop/team27/src/js/actions/notification.js"],"names":["log","console","addNotificationHandler","ctx","type","title","message","notif","Notification","user","state","activeUser","notifications","push","setState","removeNotificationHandler","id","index","_getNotificationIndex","splice","list","i","lenght","constructor","_generateId","Math","random","toString","substr"],"mappings":"AAAA,MAAMA,GAAG,GAAGC,OAAO,CAACD,GAApB;AAEA,OAAO,MAAME,sBAAsB,GAAG,CAACC,GAAD,EAAMC,IAAN,EAAYC,KAAZ,EAAmBC,OAAnB,KAA+B;AACnEN,EAAAA,GAAG,CAAC,0BAAD,CAAH;AACA,QAAMO,KAAK,GAAG,IAAIC,YAAJ,CAAiBJ,IAAjB,EAAuBC,KAAvB,EAA8BC,OAA9B,CAAd;AACA,QAAMG,IAAI,GAAGN,GAAG,CAACO,KAAJ,CAAUC,UAAvB;AACAF,EAAAA,IAAI,CAACG,aAAL,CAAmBC,IAAnB,CAAwBN,KAAxB;AACAJ,EAAAA,GAAG,CAACW,QAAJ,CAAa;AACXH,IAAAA,UAAU,EAAEF;AADD,GAAb;AAGAT,EAAAA,GAAG,CAAC,sCAAsCG,GAAG,CAACO,KAAJ,CAAUC,UAAV,CAAqBC,aAA5D,CAAH;AACD,CATM;AAWP,OAAO,MAAMG,yBAAyB,GAAG,CAACZ,GAAD,EAAMa,EAAN,KAAa;AACpD,QAAMP,IAAI,GAAGN,GAAG,CAACO,KAAJ,CAAUC,UAAvB;AACA,QAAMC,aAAa,GAAGH,IAAI,CAACG,aAA3B;AACAX,EAAAA,OAAO,CAACD,GAAR,CAAYY,aAAZ;;AACA,QAAMK,KAAK,GAAGC,qBAAqB,CAACN,aAAD,EAAgBI,EAAhB,CAAnC;;AACAf,EAAAA,OAAO,CAACD,GAAR,CAAYiB,KAAZ;AACAL,EAAAA,aAAa,CAACO,MAAd,CAAqBF,KAArB,EAA4B,CAA5B;AACAR,EAAAA,IAAI,CAACG,aAAL,GAAqBA,aAArB;AACAT,EAAAA,GAAG,CAACW,QAAJ,CAAa;AACXH,IAAAA,UAAU,EAAEF;AADD,GAAb;AAGD,CAXM;;AAaP,MAAMS,qBAAqB,GAAG,CAACE,IAAD,EAAOJ,EAAP,KAAc;AAC1C,MAAIK,CAAJ;;AACA,OAAKA,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAGD,IAAI,CAACE,MAArB,EAA6BD,CAAC,EAA9B,EAAkC;AAChC,QAAID,IAAI,CAACC,CAAD,CAAJ,CAAQL,EAAR,KAAeA,EAAnB,EAAuB;AACrB,aAAOK,CAAP;AACD;AACF;AACF,CAPD;;AASA,OAAO,MAAMb,YAAN,CAAmB;AACxBe,EAAAA,WAAW,CAACnB,IAAD,EAAOC,KAAP,EAAcC,OAAd,EAAuB;AAAA,SAOlCkB,WAPkC,GAOpB,MAAM;AAClB,aAAO,MAAMC,IAAI,CAACC,MAAL,GAAcC,QAAd,CAAuB,EAAvB,EAA2BC,MAA3B,CAAkC,CAAlC,EAAqC,CAArC,CAAb;AACD,KATiC;;AAChC,SAAKxB,IAAL,GAAYA,IAAZ;AACA,SAAKC,KAAL,GAAaA,KAAb;AACA,SAAKC,OAAL,GAAeA,OAAf;AACA,SAAKU,EAAL,GAAU,KAAKQ,WAAL,EAAV;AACD;;AANuB","sourcesContent":["const log = console.log;\n\nexport const addNotificationHandler = (ctx, type, title, message) => {\n  log('Creating notification...');\n  const notif = new Notification(type, title, message);\n  const user = ctx.state.activeUser;\n  user.notifications.push(notif);\n  ctx.setState({\n    activeUser: user,\n  });\n  log('Successfully created notification' + ctx.state.activeUser.notifications);\n};\n\nexport const removeNotificationHandler = (ctx, id) => {\n  const user = ctx.state.activeUser;\n  const notifications = user.notifications;\n  console.log(notifications)\n  const index = _getNotificationIndex(notifications, id);\n  console.log(index)\n  notifications.splice(index, 1);\n  user.notifications = notifications;\n  ctx.setState({\n    activeUser: user,\n  });\n};\n\nconst _getNotificationIndex = (list, id) => {\n  let i;\n  for (i = 0; i < list.lenght; i++) {\n    if (list[i].id === id) {\n      return i;\n    }\n  }\n};\n\nexport class Notification {\n  constructor(type, title, message) {\n    this.type = type;\n    this.title = title;\n    this.message = message;\n    this.id = this._generateId();\n  }\n\n  _generateId = () => {\n    return 'n' + Math.random().toString(36).substr(3, 8);\n  };\n}\n"]},"metadata":{},"sourceType":"module"}