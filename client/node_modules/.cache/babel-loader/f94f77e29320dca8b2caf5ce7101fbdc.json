{"ast":null,"code":"'use-strict';\n\nimport reminderSound from \"../../assets/light.mp3\";\nimport { USER_ACCOUNT_TYPE, HEALTH_CATEGORIES, ADMIN_REMINDER_TYPES, NOTIFICATION_TYPE } from \"../constants\";\nconst log = console.log;\nexport const addNotificationHandler = (ctx, type, title, message) => {\n  log('Creating notification...');\n  const notif = new Notification(type, title, message);\n  const user = ctx.state.activeUser;\n  user.notifications.push(notif);\n  ctx.setState({\n    activeUser: user\n  });\n  log('Successfully created notification', ctx.state.activeUser.notifications);\n};\nexport const removeNotificationHandler = (ctx, id) => {\n  const user = ctx.state.activeUser;\n  const notifications = user.notifications;\n\n  const index = _getNotificationIndex(notifications, id);\n\n  notifications.splice(index, 1);\n  user.notifications = notifications;\n  ctx.setState({\n    activeUser: user\n  });\n};\n\nconst _getNotificationIndex = (list, id) => {\n  let i;\n\n  for (i = 0; i < list.length; i++) {\n    if (list[i].id === id) {\n      return i;\n    }\n  }\n};\n\nexport const addTimerHandler = (ctx, id, timer) => {\n  const user = ctx.state.activeUser;\n  user.timers.push({\n    id: id,\n    timer: timer\n  });\n  ctx.setState({\n    activeUser: user\n  });\n};\nexport class Notification {\n  constructor(type, title, message) {\n    this._generateId = () => {\n      return 'n' + Math.random().toString(36).substr(3, 8);\n    };\n\n    this.type = type;\n    this.title = title;\n    this.message = message;\n    this.id = this._generateId();\n  }\n\n}\nexport const playSound = () => {\n  let rAudio = new Audio(reminderSound);\n  rAudio.play();\n};\nexport const getNumReminderNotifs = notifications => {\n  let count = 0;\n  console.log(\"TEST\", notifications);\n\n  for (let notif in notifications) {\n    console.log(notif, notif.type, notif.type === NOTIFICATION_TYPE.reminder);\n\n    if (notif.type === NOTIFICATION_TYPE.reminder) {\n      console.log(\"TEST\");\n      count += 1;\n    }\n  }\n\n  return count;\n};","map":{"version":3,"sources":["/Users/cd/Desktop/team27/src/js/actions/notification.js"],"names":["reminderSound","USER_ACCOUNT_TYPE","HEALTH_CATEGORIES","ADMIN_REMINDER_TYPES","NOTIFICATION_TYPE","log","console","addNotificationHandler","ctx","type","title","message","notif","Notification","user","state","activeUser","notifications","push","setState","removeNotificationHandler","id","index","_getNotificationIndex","splice","list","i","length","addTimerHandler","timer","timers","constructor","_generateId","Math","random","toString","substr","playSound","rAudio","Audio","play","getNumReminderNotifs","count","reminder"],"mappings":"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","sourcesContent":["'use-strict';\nimport reminderSound from \"../../assets/light.mp3\";\nimport { USER_ACCOUNT_TYPE, HEALTH_CATEGORIES, ADMIN_REMINDER_TYPES, NOTIFICATION_TYPE } from \"../constants\";\n\nconst log = console.log;\n\nexport const addNotificationHandler = (ctx, type, title, message) => {\n  log('Creating notification...');\n  const notif = new Notification(type, title, message);\n  const user = ctx.state.activeUser;\n  user.notifications.push(notif);\n  ctx.setState({\n    activeUser: user,\n  });\n  log('Successfully created notification', ctx.state.activeUser.notifications);\n};\n\nexport const removeNotificationHandler = (ctx, id) => {\n  const user = ctx.state.activeUser;\n  const notifications = user.notifications;\n  const index = _getNotificationIndex(notifications, id);\n  notifications.splice(index, 1);\n  user.notifications = notifications;\n  ctx.setState({\n    activeUser: user,\n  });\n};\n\nconst _getNotificationIndex = (list, id) => {\n  let i;\n  for (i = 0; i < list.length; i++) {\n    if (list[i].id === id) {\n      return i;\n    }\n  }\n};\n\nexport const addTimerHandler = (ctx, id, timer) => {\n  const user = ctx.state.activeUser;\n  user.timers.push({ id: id, timer: timer });\n  ctx.setState({\n    activeUser: user,\n  });\n};\n\nexport class Notification {\n  constructor(type, title, message) {\n    this.type = type;\n    this.title = title;\n    this.message = message;\n    this.id = this._generateId();\n  }\n\n  _generateId = () => {\n    return 'n' + Math.random().toString(36).substr(3, 8);\n  };\n}\n\nexport const playSound = () => {\n  let rAudio = new Audio(reminderSound);\n  rAudio.play();\n}\n\nexport const getNumReminderNotifs = (notifications) => {\n  let count = 0;\n  console.log(\"TEST\",notifications )\n  for (let notif in notifications) {\n    console.log(notif, notif.type, notif.type === NOTIFICATION_TYPE.reminder);\n    if (notif.type === NOTIFICATION_TYPE.reminder) {\n      console.log(\"TEST\");\n      count += 1;\n    }\n  }\n  return count;\n}"]},"metadata":{},"sourceType":"module"}