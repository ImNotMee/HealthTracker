{"ast":null,"code":"var _jsxFileName = \"/Users/cd/Desktop/team27/src/js/components/Reminders/AddReminder/index.js\";\nimport React, { Component } from 'react';\nimport { Redirect } from 'react-router-dom';\nimport ListSelector from '../../General/ListSelector';\nimport { onSelectHandler, onInputChangeHandler } from '../../../actions/utils';\nimport './styles.css';\nimport { HEALTH_CATEGORIES, HEALTH_SUB_CATEGORIES } from '../../../constants';\n\nclass AddReminder extends Component {\n  constructor(...args) {\n    var _this$props, _this$props2, _this$props3, _this$props4, _this$props5;\n\n    super(...args);\n    this.state = {\n      category: (_this$props = this.props) === null || _this$props === void 0 ? void 0 : _this$props.category,\n      subCategory: (_this$props2 = this.props) === null || _this$props2 === void 0 ? void 0 : _this$props2.subCategory,\n      reminderName: (_this$props3 = this.props) === null || _this$props3 === void 0 ? void 0 : _this$props3.reminderName,\n      remiderTime: (_this$props4 = this.props) === null || _this$props4 === void 0 ? void 0 : _this$props4.remiderTime,\n      reminderNote: (_this$props5 = this.props) === null || _this$props5 === void 0 ? void 0 : _this$props5.reminderNote,\n      isCategoryValid: true,\n      isSubCategoryValid: true,\n      isNameValid: true,\n      isDateTimeValid: true,\n      isNoteValid: true,\n      newReminderAdded: false\n    };\n\n    this.goToReminders = () => {\n      if (this.state.newReminderAdded) {\n        return /*#__PURE__*/React.createElement(Redirect, {\n          to: \"/reminders\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 25,\n            columnNumber: 14\n          }\n        });\n      }\n    };\n\n    this.displayErrorMsg = () => {\n      const {\n        isCategoryValid,\n        isSubCategoryValid,\n        isNameValid,\n        isDateTimeValid\n      } = this.state;\n\n      if (isCategoryValid && isSubCategoryValid && isNameValid && isDateTimeValid) {\n        return '';\n      } else {\n        return /*#__PURE__*/React.createElement(\"span\", {\n          className: \"errorMsg\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 34,\n            columnNumber: 14\n          }\n        }, \" Input fields in red are missing \");\n      }\n    };\n  }\n\n  render() {\n    var _this$props$location;\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      id: \"AddReminderWrapper\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 7\n      }\n    }, this.goToReminders(), console.log((_this$props$location = this.props.location) === null || _this$props$location === void 0 ? void 0 : _this$props$location.state.values), /*#__PURE__*/React.createElement(\"div\", {\n      id: \"AddReminderWindow\",\n      className: \"windowWrapper\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 11\n      }\n    }, \" Add Reminder \"), this.displayErrorMsg(), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"reminderInputWrapper\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      className: \"inputLabel\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 13\n      }\n    }, \" Category: \"), /*#__PURE__*/React.createElement(ListSelector, {\n      id: \"HealthCatList\",\n      className: this.state.isCategoryValid ? '' : 'invalidInput',\n      name: \"categories\",\n      autoComplete: \"false\",\n      defaultValue: this.state.category === undefined ? '' : this.state.category,\n      options: Object.values(HEALTH_CATEGORIES),\n      onChangeHandler: event => {\n        onSelectHandler(this, event, \"category\");\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 13\n      }\n    })), this.state.category !== undefined ? /*#__PURE__*/React.createElement(\"div\", {\n      className: \"reminderInputWrapper\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      className: \"inputLabel\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 15\n      }\n    }, \" Sub-Category: \"), /*#__PURE__*/React.createElement(ListSelector, {\n      id: \"SubHealthCatList\",\n      className: this.state.isSubCategoryValid ? '' : 'invalidInput',\n      name: \"subCategories\",\n      autoComplete: \"false\",\n      defaultValue: this.state.subCategory === undefined ? '' : this.state.subCategory,\n      options: HEALTH_SUB_CATEGORIES[this.state.category],\n      onChangeHandler: event => {\n        onSelectHandler(this, event, \"subCategory\");\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 15\n      }\n    })) : '', /*#__PURE__*/React.createElement(\"div\", {\n      className: \"reminderInputWrapper\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      className: \"inputLabel\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 13\n      }\n    }, \" Title: \"), /*#__PURE__*/React.createElement(\"input\", {\n      id: \"ReminderTitleInput\",\n      className: `input ${this.state.isNameValid ? '' : 'invalidInput'}`,\n      type: \"text\",\n      name: \"reminderName\",\n      placeholder: \"Title\",\n      onChange: event => {\n        onInputChangeHandler(this, event);\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 13\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"reminderInputWrapper\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      className: \"inputLabel\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 13\n      }\n    }, \" When to remind: \"), /*#__PURE__*/React.createElement(\"input\", {\n      className: `input ${this.state.isDateTimeValid ? '' : 'invalidInput'}`,\n      type: \"datetime-local\",\n      id: \"DateTimeInput\",\n      name: \"reminderTime\",\n      value: this.state.remiderTime,\n      min: new Date(),\n      onChange: event => {\n        onInputChangeHandler(this, event);\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 13\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"reminderInputWrapper\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      className: \"inputLabel\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 13\n      }\n    }, \" Notes: \"), /*#__PURE__*/React.createElement(\"textarea\", {\n      id: \"ReminderNotesInput\",\n      className: `input ${this.state.isNoteValid ? '' : 'invalidInput'}`,\n      name: \"reminderNote\",\n      maxLength: \"225\",\n      placeholder: \"Notes\",\n      onChange: event => {\n        onInputChangeHandler(this, event);\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(\"span\", {\n      className: \"charCount\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 13\n      }\n    }, this.state.reminderNote !== undefined ? this.state['reminderNote'].length : '0', \"/225\")), /*#__PURE__*/React.createElement(\"button\", {\n      className: \"primary-btn\",\n      onClick: () => {\n        this.props.addReminderHandler(this);\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 11\n      }\n    }, \" Add \")));\n  }\n\n}\n\nexport default AddReminder;","map":{"version":3,"sources":["/Users/cd/Desktop/team27/src/js/components/Reminders/AddReminder/index.js"],"names":["React","Component","Redirect","ListSelector","onSelectHandler","onInputChangeHandler","HEALTH_CATEGORIES","HEALTH_SUB_CATEGORIES","AddReminder","state","category","props","subCategory","reminderName","remiderTime","reminderNote","isCategoryValid","isSubCategoryValid","isNameValid","isDateTimeValid","isNoteValid","newReminderAdded","goToReminders","displayErrorMsg","render","console","log","location","values","undefined","Object","event","Date","length","addReminderHandler"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { Redirect } from 'react-router-dom';\nimport ListSelector from '../../General/ListSelector'\nimport { onSelectHandler, onInputChangeHandler} from '../../../actions/utils'\nimport './styles.css'\nimport { HEALTH_CATEGORIES, HEALTH_SUB_CATEGORIES } from '../../../constants';\n\nclass AddReminder extends Component {\n  state = {\n    category: this.props?.category,\n    subCategory: this.props?.subCategory,\n    reminderName: this.props?.reminderName,\n    remiderTime: this.props?.remiderTime,\n    reminderNote: this.props?.reminderNote,\n    isCategoryValid: true,\n    isSubCategoryValid: true,\n    isNameValid: true,\n    isDateTimeValid: true,\n    isNoteValid: true,\n    newReminderAdded: false\n  }\n\n  goToReminders = () => {\n    if (this.state.newReminderAdded) {\n      return <Redirect to=\"/reminders\" />;\n    }\n  }\n\n  displayErrorMsg = () => {\n    const { isCategoryValid, isSubCategoryValid, isNameValid, isDateTimeValid } = this.state\n    if (isCategoryValid && isSubCategoryValid && isNameValid && isDateTimeValid) {\n      return '';\n    } else {\n      return <span className=\"errorMsg\"> Input fields in red are missing </span>;\n    }\n  }\n\n  render() {\n    return (\n      <div id=\"AddReminderWrapper\" >\n        {this.goToReminders()}\n        {console.log(this.props.location?.state.values)}\n        <div id=\"AddReminderWindow\" className=\"windowWrapper\">\n          <h1> Add Reminder </h1>\n          {this.displayErrorMsg()}\n          <br/>\n          <div className=\"reminderInputWrapper\">\n            <span className=\"inputLabel\"> Category: </span>\n            <ListSelector \n              id=\"HealthCatList\"\n              className={this.state.isCategoryValid ? '' : 'invalidInput'}\n              name=\"categories\"\n              autoComplete=\"false\"\n              defaultValue={this.state.category === undefined ? '' : this.state.category}\n              options={Object.values(HEALTH_CATEGORIES)}\n              onChangeHandler={(event)=>{onSelectHandler(this, event, \"category\")}}\n            />\n          </div>\n          {this.state.category !== undefined ?\n            <div className=\"reminderInputWrapper\">\n              <span className=\"inputLabel\"> Sub-Category: </span>\n              <ListSelector \n                id=\"SubHealthCatList\"\n                className={this.state.isSubCategoryValid ? '' : 'invalidInput'}\n                name=\"subCategories\"\n                autoComplete=\"false\"\n                defaultValue={this.state.subCategory === undefined ? '' : this.state.subCategory}\n                options={HEALTH_SUB_CATEGORIES[this.state.category]}\n                onChangeHandler={(event)=>{onSelectHandler(this, event, \"subCategory\")}}\n              /> \n            </div> : ''\n          }\n          <div className=\"reminderInputWrapper\">\n            <span className=\"inputLabel\"> Title: </span>\n            <input \n              id=\"ReminderTitleInput\"\n              className={`input ${this.state.isNameValid ? '' : 'invalidInput'}`}\n              type=\"text\" \n              name=\"reminderName\" \n              placeholder=\"Title\"\n              onChange={(event) => {onInputChangeHandler(this, event)}}\n            />\n          </div>\n          <div className=\"reminderInputWrapper\">\n            <span className=\"inputLabel\"> When to remind: </span>\n            <input \n              className={`input ${this.state.isDateTimeValid ? '' : 'invalidInput'}`}\n              type=\"datetime-local\" \n              id=\"DateTimeInput\"\n              name=\"reminderTime\" \n              value={this.state.remiderTime}\n              min={(new Date())}\n              onChange={(event) => {onInputChangeHandler(this, event)}}\n            />\n          </div>\n          <div className=\"reminderInputWrapper\">\n            <span className=\"inputLabel\"> Notes: </span>\n            <textarea \n              id=\"ReminderNotesInput\"\n              className={`input ${this.state.isNoteValid ? '' : 'invalidInput'}`}  \n              name=\"reminderNote\"\n              maxLength='225' \n              placeholder=\"Notes\"\n              onChange={(event) => {onInputChangeHandler(this, event)}}\n            />\n            <br/>\n            <span className=\"charCount\">{this.state.reminderNote !== undefined ? this.state['reminderNote'].length : '0'}/225</span>\n          </div>\n          <button className=\"primary-btn\" onClick={()=> {this.props.addReminderHandler(this)}}> Add </button>\n        </div>\n      </div>\n    );\n  };\n}\n\nexport default AddReminder;"]},"metadata":{},"sourceType":"module"}