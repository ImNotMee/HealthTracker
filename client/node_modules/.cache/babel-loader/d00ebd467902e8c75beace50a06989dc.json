{"ast":null,"code":"export const fetchCardData = user => {\n  // it should call an endpoint to fetch user card data\n  const user_card = {\n    Water: {\n      completed: 0.8,\n      remaining: 2,\n      unit: 'L'\n    },\n    Calories: {\n      completed: 300,\n      remaining: 1700,\n      unit: 'Calories'\n    },\n    Mood: {\n      value: 'Happy'\n    },\n    Sleep: {\n      hours: 8,\n      quality: 'Good' // 3 levels bad, okay, good\n\n    },\n    Stress: {\n      value: 1\n    },\n    Medication: [{\n      drug: 'Cold Medicine',\n      completed: 1,\n      remainging: 2\n    }, {\n      drug: 'Allergy Medicine',\n      completed: 2,\n      remainging: 4\n    }],\n    Sickness: {\n      //\n      sick: true\n    },\n    Appointments: [// shows all appointments today\n    {\n      event: 'Annual Checkup',\n      doctor: 'Dr. Zoudas',\n      time: '16:00:00'\n    }, {\n      event: 'Blood Donation',\n      doctor: 'Dr. Dre',\n      time: '10:00:00'\n    }, {\n      event: 'Dentist',\n      doctor: 'Dr. Teth',\n      time: '12:00:00'\n    }]\n  };\n  return user_card;\n}; // lists of actions to change user_card state\n\nexport const setBMI = (card, newBMI, newHeight, newWeight, newUnit) => {\n  console.log('updating BMI to ');\n  const {\n    user_card,\n    user\n  } = card.state;\n  user_card['BMI']['value'] = newBMI;\n  user_card['BMI']['height'] = newHeight;\n  user_card['BMI']['weight'] = newWeight;\n  user_card['BMI']['unit'] = newUnit;\n  const today = new Date();\n  const day = today.getDay(); // conversion from standard to metric\n\n  let trendWeight = newWeight;\n\n  if (newUnit === 'metric') {\n    trendWeight = newWeight * 2.205;\n  }\n\n  user.trends.weight[day] = trendWeight;\n  card.setState({\n    user_card: user_card,\n    user: user\n  });\n  console.log(user_card['BMI']['value']);\n};\nexport const setWater = (card, newWater) => {\n  console.log('updating Water to ');\n  const {\n    user_card\n  } = card.state;\n  user_card['Water']['completed'] = newWater;\n  let remainging = 2000 - newWater;\n\n  if (remainging < 0) {\n    remainging = 0;\n  }\n\n  user_card['Water']['remaining'] = remainging;\n  card.setState({\n    user_card: user_card\n  });\n  console.log(user_card['Water']['completed']);\n};\nexport const setCalories = (card, newCalories) => {\n  console.log('updating Calories to ');\n  const {\n    user_card,\n    user\n  } = card.state;\n  user_card['Calories']['completed'] = newCalories;\n  let remainging = 2000 - newCalories;\n\n  if (remainging < 0) {\n    remainging = 0;\n  }\n\n  user_card['Calories']['remaining'] = remainging;\n  const today = new Date();\n  const day = today.getDay();\n  user.trends.calories[day] = newCalories;\n  card.setState({\n    user_card: user_card,\n    user: user\n  });\n  console.log(user_card['Calories']['completed']);\n};\nexport const setMood = (card, newMood) => {\n  console.log('updating Mood to ');\n  const {\n    user_card\n  } = card.state;\n  user_card['Mood']['value'] = newMood;\n  card.setState({\n    user_card: user_card\n  });\n  console.log(user_card['Mood']['value']);\n};\nexport const setSleep = (card, newSleepHours, newSleepQuality) => {\n  console.log('updating Sleep to ');\n  const {\n    user_card,\n    user\n  } = card.state;\n  user_card['Sleep']['hours'] = newSleepHours;\n  user_card['Sleep']['quality'] = newSleepQuality;\n  const today = new Date();\n  const day = today.getDay();\n  user.trends.sleep[day] = newSleepHours;\n  card.setState({\n    user_card: user_card,\n    user: user\n  });\n  console.log(user_card['Sleep']['hours'], 'and ', user_card['Sleep']['quality']);\n};\nexport const setStress = (card, newStress) => {\n  console.log('updating Stress to ');\n  const {\n    user_card,\n    user\n  } = card.state;\n  user_card['Stress']['value'] = newStress;\n  const today = new Date();\n  const day = today.getDay();\n  user.trends.stress[day] = newStress;\n  card.setState({\n    user_card: user_card,\n    user: user\n  });\n  console.log(user_card['Stress']['value']);\n};\nexport const setSickness = (card, newSickness) => {\n  console.log('updating Stress to ');\n  const {\n    user_card\n  } = card.state;\n  user_card['Sickness'] = newSickness;\n  card.setState({\n    user_card: user_card\n  });\n  console.log(user_card['Sickness']);\n};","map":{"version":3,"sources":["/Users/cd/Desktop/team27/src/js/actions/cardData.js"],"names":["fetchCardData","user","user_card","Water","completed","remaining","unit","Calories","Mood","value","Sleep","hours","quality","Stress","Medication","drug","remainging","Sickness","sick","Appointments","event","doctor","time","setBMI","card","newBMI","newHeight","newWeight","newUnit","console","log","state","today","Date","day","getDay","trendWeight","trends","weight","setState","setWater","newWater","setCalories","newCalories","calories","setMood","newMood","setSleep","newSleepHours","newSleepQuality","sleep","setStress","newStress","stress","setSickness","newSickness"],"mappings":"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","sourcesContent":["export const fetchCardData = (user) => {\n  // it should call an endpoint to fetch user card data\n  const user_card = {\n    Water: {\n      completed: 0.8,\n      remaining: 2,\n      unit: 'L',\n    },\n    Calories: {\n      completed: 300,\n      remaining: 1700,\n      unit: 'Calories',\n    },\n    Mood: {\n      value: 'Happy',\n    },\n    Sleep: {\n      hours: 8,\n      quality: 'Good', // 3 levels bad, okay, good\n    },\n    Stress: {\n      value: 1,\n    },\n    Medication: [\n      {\n        drug: 'Cold Medicine',\n        completed: 1,\n        remainging: 2,\n      },\n      {\n        drug: 'Allergy Medicine',\n        completed: 2,\n        remainging: 4,\n      },\n    ],\n    Sickness: {\n      //\n      sick: true,\n    },\n    Appointments: [\n      // shows all appointments today\n      {\n        event: 'Annual Checkup',\n        doctor: 'Dr. Zoudas',\n        time: '16:00:00',\n      },\n      {\n        event: 'Blood Donation',\n        doctor: 'Dr. Dre',\n        time: '10:00:00',\n      },\n      {\n        event: 'Dentist',\n        doctor: 'Dr. Teth',\n        time: '12:00:00',\n      },\n    ],\n  };\n\n  return user_card;\n};\n\n// lists of actions to change user_card state\n\nexport const setBMI = (card, newBMI, newHeight, newWeight, newUnit) => {\n  console.log('updating BMI to ');\n  const { user_card, user } = card.state;\n  user_card['BMI']['value'] = newBMI;\n  user_card['BMI']['height'] = newHeight;\n  user_card['BMI']['weight'] = newWeight;\n  user_card['BMI']['unit'] = newUnit;\n\n  const today = new Date();\n  const day = today.getDay();\n  // conversion from standard to metric\n  let trendWeight = newWeight;\n  if (newUnit === 'metric') {\n    trendWeight = newWeight * 2.205;\n  }\n  user.trends.weight[day] = trendWeight;\n\n  card.setState({\n    user_card: user_card,\n    user: user,\n  });\n  console.log(user_card['BMI']['value']);\n};\n\nexport const setWater = (card, newWater) => {\n  console.log('updating Water to ');\n  const { user_card } = card.state;\n  user_card['Water']['completed'] = newWater;\n  let remainging = 2000 - newWater;\n  if (remainging < 0) {\n    remainging = 0;\n  }\n  user_card['Water']['remaining'] = remainging;\n  card.setState({\n    user_card: user_card,\n  });\n  console.log(user_card['Water']['completed']);\n};\n\nexport const setCalories = (card, newCalories) => {\n  console.log('updating Calories to ');\n  const { user_card, user } = card.state;\n  user_card['Calories']['completed'] = newCalories;\n  let remainging = 2000 - newCalories;\n  if (remainging < 0) {\n    remainging = 0;\n  }\n  user_card['Calories']['remaining'] = remainging;\n\n  const today = new Date();\n  const day = today.getDay();\n  user.trends.calories[day] = newCalories;\n\n  card.setState({\n    user_card: user_card,\n    user: user,\n  });\n  console.log(user_card['Calories']['completed']);\n};\n\nexport const setMood = (card, newMood) => {\n  console.log('updating Mood to ');\n  const { user_card } = card.state;\n  user_card['Mood']['value'] = newMood;\n  card.setState({\n    user_card: user_card,\n  });\n  console.log(user_card['Mood']['value']);\n};\n\nexport const setSleep = (card, newSleepHours, newSleepQuality) => {\n  console.log('updating Sleep to ');\n  const { user_card, user } = card.state;\n  user_card['Sleep']['hours'] = newSleepHours;\n  user_card['Sleep']['quality'] = newSleepQuality;\n\n  const today = new Date();\n  const day = today.getDay();\n  user.trends.sleep[day] = newSleepHours;\n\n  card.setState({\n    user_card: user_card,\n    user: user,\n  });\n  console.log(user_card['Sleep']['hours'], 'and ', user_card['Sleep']['quality']);\n};\n\nexport const setStress = (card, newStress) => {\n  console.log('updating Stress to ');\n  const { user_card, user } = card.state;\n  user_card['Stress']['value'] = newStress;\n\n  const today = new Date();\n  const day = today.getDay();\n  user.trends.stress[day] = newStress;\n\n  card.setState({\n    user_card: user_card,\n    user: user,\n  });\n  console.log(user_card['Stress']['value']);\n};\n\nexport const setSickness = (card, newSickness) => {\n  console.log('updating Stress to ');\n  const { user_card } = card.state;\n  user_card['Sickness'] = newSickness;\n  card.setState({\n    user_card: user_card,\n  });\n  console.log(user_card['Sickness']);\n};\n"]},"metadata":{},"sourceType":"module"}