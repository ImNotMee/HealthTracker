{"ast":null,"code":"import _classCallCheck from\"/Users/cd/Desktop/team27/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/Users/cd/Desktop/team27/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";import _inherits from\"/Users/cd/Desktop/team27/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";import _createSuper from\"/Users/cd/Desktop/team27/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";import React,{Component}from'react';import{NavLink}from'react-router-dom';import Fab from'@material-ui/core/Fab';import AddIcon from'@material-ui/icons/Add';import ReminderItem from'./ReminderItem';import{HEALTH_CATEGORIES,USER_ACCOUNT_TYPE,ADMIN_REMINDER_TYPES}from'../../constants';import'./styles.css';var EmptyReminderList=function EmptyReminderList(){return/*#__PURE__*/React.createElement(\"div\",{id:\"EmptyReminderList\"},/*#__PURE__*/React.createElement(\"p\",null,\" No reminders set \"));};var Reminders=/*#__PURE__*/function(_Component){_inherits(Reminders,_Component);var _super=_createSuper(Reminders);function Reminders(){var _this;_classCallCheck(this,Reminders);for(var _len=arguments.length,args=new Array(_len),_key=0;_key<_len;_key++){args[_key]=arguments[_key];}_this=_super.call.apply(_super,[this].concat(args));_this.state={user:_this.props.activeUser};_this.getReminderCatView=function(type){var _this$state$user,_this$state$user2;return/*#__PURE__*/React.createElement(\"div\",null,/*#__PURE__*/React.createElement(\"span\",{className:\"catTitle\"},\" \",type,\" \"),/*#__PURE__*/React.createElement(\"div\",{className:\"titleLine\"}),((_this$state$user=_this.state.user)===null||_this$state$user===void 0?void 0:_this$state$user.reminders[type].length)===0?/*#__PURE__*/React.createElement(EmptyReminderList,null):(_this$state$user2=_this.state.user)===null||_this$state$user2===void 0?void 0:_this$state$user2.reminders[type].map(function(reminder){return/*#__PURE__*/React.createElement(ReminderItem,{key:reminder.id,reminder:reminder,notifyAboutReminder:_this.props.notifyAboutReminder,completeReminderHandler:_this.props.completeReminderHandler,deleteReminderHandler:_this.props.deleteReminderHandler});}));};_this.getUserReminderView=function(){var userReminderTypes=[HEALTH_CATEGORIES.medical,HEALTH_CATEGORIES.mental,HEALTH_CATEGORIES.phsycial];return/*#__PURE__*/React.createElement(\"div\",{id:\"RemindersView\",className:\"windowWrapper\"},userReminderTypes.map(function(type){return _this.getReminderCatView(type);}));};_this.getAdminReminderView=function(){var adminReminderTypes=[ADMIN_REMINDER_TYPES.task];return/*#__PURE__*/React.createElement(\"div\",{id:\"RemindersView\",className:\"windowWrapper\"},adminReminderTypes.map(function(type){return _this.getReminderCatView(type);}));};return _this;}_createClass(Reminders,[{key:\"render\",value:function render(){var _this$state$user3;return/*#__PURE__*/React.createElement(\"div\",{id:\"RemindersWrapper\"},((_this$state$user3=this.state.user)===null||_this$state$user3===void 0?void 0:_this$state$user3.type)===USER_ACCOUNT_TYPE?this.getUserReminderView():this.getAdminReminderView(),/*#__PURE__*/React.createElement(NavLink,{className:\"fabNavLink\",to:\"/reminders/add\"},/*#__PURE__*/React.createElement(Fab,{variant:\"extended\",id:\"Fab\",color:\"primary\",\"aria-label\":\"add\"},/*#__PURE__*/React.createElement(AddIcon,null),\"Add Reminder\")));}}]);return Reminders;}(Component);export default Reminders;","map":{"version":3,"sources":["/Users/cd/Desktop/team27/src/js/components/Reminders/index.jsx"],"names":["React","Component","NavLink","Fab","AddIcon","ReminderItem","HEALTH_CATEGORIES","USER_ACCOUNT_TYPE","ADMIN_REMINDER_TYPES","EmptyReminderList","Reminders","state","user","props","activeUser","getReminderCatView","type","reminders","length","map","reminder","id","notifyAboutReminder","completeReminderHandler","deleteReminderHandler","getUserReminderView","userReminderTypes","medical","mental","phsycial","getAdminReminderView","adminReminderTypes","task"],"mappings":"4iBAAA,MAAOA,CAAAA,KAAP,EAAgBC,SAAhB,KAAiC,OAAjC,CACA,OAASC,OAAT,KAAwB,kBAAxB,CACA,MAAOC,CAAAA,GAAP,KAAgB,uBAAhB,CACA,MAAOC,CAAAA,OAAP,KAAoB,wBAApB,CACA,MAAOC,CAAAA,YAAP,KAAyB,gBAAzB,CACA,OAASC,iBAAT,CAA4BC,iBAA5B,CAA+CC,oBAA/C,KAA2E,iBAA3E,CACA,MAAO,cAAP,CAEA,GAAMC,CAAAA,iBAAiB,CAAG,QAApBA,CAAAA,iBAAoB,EAAM,CAC9B,mBACE,2BAAK,EAAE,CAAC,mBAAR,eACE,kDADF,CADF,CAKD,CAND,C,GAQMC,CAAAA,S,uUACJC,K,CAAQ,CACNC,IAAI,CAAE,MAAKC,KAAL,CAAWC,UADX,C,OAIRC,kB,CAAqB,SAACC,IAAD,CAAU,wCAC7B,mBACE,4CACE,4BAAM,SAAS,CAAC,UAAhB,MAA6BA,IAA7B,KADF,cAEE,2BAAK,SAAS,CAAC,WAAf,EAFF,CAGG,yBAAKL,KAAL,CAAWC,IAAX,4DAAiBK,SAAjB,CAA2BD,IAA3B,EAAiCE,MAAjC,IAA4C,CAA5C,cACC,oBAAC,iBAAD,MADD,oBAGC,MAAKP,KAAL,CAAWC,IAHZ,4CAGC,kBAAiBK,SAAjB,CAA2BD,IAA3B,EAAiCG,GAAjC,CAAqC,SAACC,QAAD,CAAc,CACjD,mBACE,oBAAC,YAAD,EACE,GAAG,CAAEA,QAAQ,CAACC,EADhB,CAEE,QAAQ,CAAED,QAFZ,CAGE,mBAAmB,CAAE,MAAKP,KAAL,CAAWS,mBAHlC,CAIE,uBAAuB,CAAE,MAAKT,KAAL,CAAWU,uBAJtC,CAKE,qBAAqB,CAAE,MAAKV,KAAL,CAAWW,qBALpC,EADF,CASD,CAVD,CANJ,CADF,CAqBD,C,OAEDC,mB,CAAsB,UAAM,CAC1B,GAAMC,CAAAA,iBAAiB,CAAG,CACxBpB,iBAAiB,CAACqB,OADM,CAExBrB,iBAAiB,CAACsB,MAFM,CAGxBtB,iBAAiB,CAACuB,QAHM,CAA1B,CAKA,mBACE,2BAAK,EAAE,CAAC,eAAR,CAAwB,SAAS,CAAC,eAAlC,EACGH,iBAAiB,CAACP,GAAlB,CAAsB,SAACH,IAAD,CAAU,CAC/B,MAAO,OAAKD,kBAAL,CAAwBC,IAAxB,CAAP,CACD,CAFA,CADH,CADF,CAOD,C,OAEDc,oB,CAAuB,UAAM,CAC3B,GAAMC,CAAAA,kBAAkB,CAAG,CAACvB,oBAAoB,CAACwB,IAAtB,CAA3B,CACA,mBACE,2BAAK,EAAE,CAAC,eAAR,CAAwB,SAAS,CAAC,eAAlC,EACGD,kBAAkB,CAACZ,GAAnB,CAAuB,SAACH,IAAD,CAAU,CAChC,MAAO,OAAKD,kBAAL,CAAwBC,IAAxB,CAAP,CACD,CAFA,CADH,CADF,CAOD,C,4EAEQ,uBACP,mBACE,2BAAK,EAAE,CAAC,kBAAR,EACG,yBAAKL,KAAL,CAAWC,IAAX,8DAAiBI,IAAjB,IAA0BT,iBAA1B,CACG,KAAKkB,mBAAL,EADH,CAEG,KAAKK,oBAAL,EAHN,cAIE,oBAAC,OAAD,EAAS,SAAS,CAAC,YAAnB,CAAgC,EAAE,CAAC,gBAAnC,eACE,oBAAC,GAAD,EAAK,OAAO,CAAC,UAAb,CAAwB,EAAE,CAAC,KAA3B,CAAiC,KAAK,CAAC,SAAvC,CAAiD,aAAW,KAA5D,eACE,oBAAC,OAAD,MADF,gBADF,CAJF,CADF,CAaD,C,uBArEqB7B,S,EAwExB,cAAeS,CAAAA,SAAf","sourcesContent":["import React, { Component } from 'react';\nimport { NavLink } from 'react-router-dom';\nimport Fab from '@material-ui/core/Fab';\nimport AddIcon from '@material-ui/icons/Add';\nimport ReminderItem from './ReminderItem';\nimport { HEALTH_CATEGORIES, USER_ACCOUNT_TYPE, ADMIN_REMINDER_TYPES } from '../../constants';\nimport './styles.css';\n\nconst EmptyReminderList = () => {\n  return (\n    <div id=\"EmptyReminderList\">\n      <p> No reminders set </p>\n    </div>\n  );\n};\n\nclass Reminders extends Component {\n  state = {\n    user: this.props.activeUser,\n  };\n\n  getReminderCatView = (type) => {\n    return (\n      <div>\n        <span className=\"catTitle\"> {type} </span>\n        <div className=\"titleLine\" />\n        {this.state.user?.reminders[type].length === 0 ? (\n          <EmptyReminderList />\n        ) : (\n          this.state.user?.reminders[type].map((reminder) => {\n            return (\n              <ReminderItem\n                key={reminder.id}\n                reminder={reminder}\n                notifyAboutReminder={this.props.notifyAboutReminder}\n                completeReminderHandler={this.props.completeReminderHandler}\n                deleteReminderHandler={this.props.deleteReminderHandler}\n              />\n            );\n          })\n        )}\n      </div>\n    );\n  };\n\n  getUserReminderView = () => {\n    const userReminderTypes = [\n      HEALTH_CATEGORIES.medical,\n      HEALTH_CATEGORIES.mental,\n      HEALTH_CATEGORIES.phsycial,\n    ];\n    return (\n      <div id=\"RemindersView\" className=\"windowWrapper\">\n        {userReminderTypes.map((type) => {\n          return this.getReminderCatView(type);\n        })}\n      </div>\n    );\n  };\n\n  getAdminReminderView = () => {\n    const adminReminderTypes = [ADMIN_REMINDER_TYPES.task];\n    return (\n      <div id=\"RemindersView\" className=\"windowWrapper\">\n        {adminReminderTypes.map((type) => {\n          return this.getReminderCatView(type);\n        })}\n      </div>\n    );\n  };\n\n  render() {\n    return (\n      <div id=\"RemindersWrapper\">\n        {this.state.user?.type === USER_ACCOUNT_TYPE\n          ? this.getUserReminderView()\n          : this.getAdminReminderView()}\n        <NavLink className=\"fabNavLink\" to=\"/reminders/add\">\n          <Fab variant=\"extended\" id=\"Fab\" color=\"primary\" aria-label=\"add\">\n            <AddIcon />\n            Add Reminder\n          </Fab>\n        </NavLink>\n      </div>\n    );\n  }\n}\n\nexport default Reminders;\n"]},"metadata":{},"sourceType":"module"}